#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OurThings
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Material")]
	public partial class TheDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActor(Actor instance);
    partial void UpdateActor(Actor instance);
    partial void DeleteActor(Actor instance);
    partial void InsertVideoType(VideoType instance);
    partial void UpdateVideoType(VideoType instance);
    partial void DeleteVideoType(VideoType instance);
    partial void InsertArtist(Artist instance);
    partial void UpdateArtist(Artist instance);
    partial void DeleteArtist(Artist instance);
    partial void InsertAudio(Audio instance);
    partial void UpdateAudio(Audio instance);
    partial void DeleteAudio(Audio instance);
    partial void InsertAudioArtist(AudioArtist instance);
    partial void UpdateAudioArtist(AudioArtist instance);
    partial void DeleteAudioArtist(AudioArtist instance);
    partial void InsertAudioType(AudioType instance);
    partial void UpdateAudioType(AudioType instance);
    partial void DeleteAudioType(AudioType instance);
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertBookAuthor(BookAuthor instance);
    partial void UpdateBookAuthor(BookAuthor instance);
    partial void DeleteBookAuthor(BookAuthor instance);
    partial void InsertBookContent(BookContent instance);
    partial void UpdateBookContent(BookContent instance);
    partial void DeleteBookContent(BookContent instance);
    partial void InsertBookPub(BookPub instance);
    partial void UpdateBookPub(BookPub instance);
    partial void DeleteBookPub(BookPub instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertDirector(Director instance);
    partial void UpdateDirector(Director instance);
    partial void DeleteDirector(Director instance);
    partial void InsertKEY(KEY instance);
    partial void UpdateKEY(KEY instance);
    partial void DeleteKEY(KEY instance);
    partial void InsertKeyType(KeyType instance);
    partial void UpdateKeyType(KeyType instance);
    partial void DeleteKeyType(KeyType instance);
    partial void InsertMusicPub(MusicPub instance);
    partial void UpdateMusicPub(MusicPub instance);
    partial void DeleteMusicPub(MusicPub instance);
    partial void InsertMusicTrack(MusicTrack instance);
    partial void UpdateMusicTrack(MusicTrack instance);
    partial void DeleteMusicTrack(MusicTrack instance);
    partial void InsertOwner(Owner instance);
    partial void UpdateOwner(Owner instance);
    partial void DeleteOwner(Owner instance);
    partial void InsertVideo(Video instance);
    partial void UpdateVideo(Video instance);
    partial void DeleteVideo(Video instance);
    partial void InsertVideoActor(VideoActor instance);
    partial void UpdateVideoActor(VideoActor instance);
    partial void DeleteVideoActor(VideoActor instance);
    partial void InsertSoftwareContent(SoftwareContent instance);
    partial void UpdateSoftwareContent(SoftwareContent instance);
    partial void DeleteSoftwareContent(SoftwareContent instance);
    partial void InsertSofwarePub(SofwarePub instance);
    partial void UpdateSofwarePub(SofwarePub instance);
    partial void DeleteSofwarePub(SofwarePub instance);
    partial void InsertMediaType(MediaType instance);
    partial void UpdateMediaType(MediaType instance);
    partial void DeleteMediaType(MediaType instance);
    partial void InsertSoftware(Software instance);
    partial void UpdateSoftware(Software instance);
    partial void DeleteSoftware(Software instance);
    partial void InsertItemManufacturer(ItemManufacturer instance);
    partial void UpdateItemManufacturer(ItemManufacturer instance);
    partial void DeleteItemManufacturer(ItemManufacturer instance);
    partial void InsertTransactionTypeTable(TransactionTypeTable instance);
    partial void UpdateTransactionTypeTable(TransactionTypeTable instance);
    partial void DeleteTransactionTypeTable(TransactionTypeTable instance);
    partial void InsertUserPreferenceTable(UserPreferenceTable instance);
    partial void UpdateUserPreferenceTable(UserPreferenceTable instance);
    partial void DeleteUserPreferenceTable(UserPreferenceTable instance);
    partial void InsertDocumentType(DocumentType instance);
    partial void UpdateDocumentType(DocumentType instance);
    partial void DeleteDocumentType(DocumentType instance);
    partial void InsertTransactionTable(TransactionTable instance);
    partial void UpdateTransactionTable(TransactionTable instance);
    partial void DeleteTransactionTable(TransactionTable instance);
    partial void InsertError(Error instance);
    partial void UpdateError(Error instance);
    partial void DeleteError(Error instance);
    partial void InsertItemLoc(ItemLoc instance);
    partial void UpdateItemLoc(ItemLoc instance);
    partial void DeleteItemLoc(ItemLoc instance);
    partial void InsertAccountTypeTable(AccountTypeTable instance);
    partial void UpdateAccountTypeTable(AccountTypeTable instance);
    partial void DeleteAccountTypeTable(AccountTypeTable instance);
    partial void InsertLineItemStatusCode(LineItemStatusCode instance);
    partial void UpdateLineItemStatusCode(LineItemStatusCode instance);
    partial void DeleteLineItemStatusCode(LineItemStatusCode instance);
    partial void InsertAccountGroupTable(AccountGroupTable instance);
    partial void UpdateAccountGroupTable(AccountGroupTable instance);
    partial void DeleteAccountGroupTable(AccountGroupTable instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertAccountTable(AccountTable instance);
    partial void UpdateAccountTable(AccountTable instance);
    partial void DeleteAccountTable(AccountTable instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertDepositLine(DepositLine instance);
    partial void UpdateDepositLine(DepositLine instance);
    partial void DeleteDepositLine(DepositLine instance);
    partial void InsertItemConditionCode(ItemConditionCode instance);
    partial void UpdateItemConditionCode(ItemConditionCode instance);
    partial void DeleteItemConditionCode(ItemConditionCode instance);
    partial void InsertTransLineItemStatus(TransLineItemStatus instance);
    partial void UpdateTransLineItemStatus(TransLineItemStatus instance);
    partial void DeleteTransLineItemStatus(TransLineItemStatus instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertSalesDoc(SalesDoc instance);
    partial void UpdateSalesDoc(SalesDoc instance);
    partial void DeleteSalesDoc(SalesDoc instance);
    partial void InsertSalesDocStatus(SalesDocStatus instance);
    partial void UpdateSalesDocStatus(SalesDocStatus instance);
    partial void DeleteSalesDocStatus(SalesDocStatus instance);
    partial void InsertTaxRate(TaxRate instance);
    partial void UpdateTaxRate(TaxRate instance);
    partial void DeleteTaxRate(TaxRate instance);
    partial void InsertItemType(ItemType instance);
    partial void UpdateItemType(ItemType instance);
    partial void DeleteItemType(ItemType instance);
    partial void InsertLocationType(LocationType instance);
    partial void UpdateLocationType(LocationType instance);
    partial void DeleteLocationType(LocationType instance);
    partial void InsertItemTypeRevExp(ItemTypeRevExp instance);
    partial void UpdateItemTypeRevExp(ItemTypeRevExp instance);
    partial void DeleteItemTypeRevExp(ItemTypeRevExp instance);
    partial void InsertUserActSumView(UserActSumView instance);
    partial void UpdateUserActSumView(UserActSumView instance);
    partial void DeleteUserActSumView(UserActSumView instance);
    partial void InsertVendItem(VendItem instance);
    partial void UpdateVendItem(VendItem instance);
    partial void DeleteVendItem(VendItem instance);
    partial void InsertReceivableDoc(ReceivableDoc instance);
    partial void UpdateReceivableDoc(ReceivableDoc instance);
    partial void DeleteReceivableDoc(ReceivableDoc instance);
    partial void InsertContactTypeTable(ContactTypeTable instance);
    partial void UpdateContactTypeTable(ContactTypeTable instance);
    partial void DeleteContactTypeTable(ContactTypeTable instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertItemSN(ItemSN instance);
    partial void UpdateItemSN(ItemSN instance);
    partial void DeleteItemSN(ItemSN instance);
    partial void InsertServiceCreditType(ServiceCreditType instance);
    partial void UpdateServiceCreditType(ServiceCreditType instance);
    partial void DeleteServiceCreditType(ServiceCreditType instance);
    partial void InsertServiceCreditValue(ServiceCreditValue instance);
    partial void UpdateServiceCreditValue(ServiceCreditValue instance);
    partial void DeleteServiceCreditValue(ServiceCreditValue instance);
    partial void InsertServiceCredit(ServiceCredit instance);
    partial void UpdateServiceCredit(ServiceCredit instance);
    partial void DeleteServiceCredit(ServiceCredit instance);
    partial void InsertJobLine(JobLine instance);
    partial void UpdateJobLine(JobLine instance);
    partial void DeleteJobLine(JobLine instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertTransLineItem(TransLineItem instance);
    partial void UpdateTransLineItem(TransLineItem instance);
    partial void DeleteTransLineItem(TransLineItem instance);
    partial void InsertPayMethod(PayMethod instance);
    partial void UpdatePayMethod(PayMethod instance);
    partial void DeletePayMethod(PayMethod instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertTaxCollection(TaxCollection instance);
    partial void UpdateTaxCollection(TaxCollection instance);
    partial void DeleteTaxCollection(TaxCollection instance);
    partial void InsertUserDateRange(UserDateRange instance);
    partial void UpdateUserDateRange(UserDateRange instance);
    partial void DeleteUserDateRange(UserDateRange instance);
    #endregion
		
		public TheDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MaterialConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TheDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TheDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TheDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TheDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Actor> Actors
		{
			get
			{
				return this.GetTable<Actor>();
			}
		}
		
		public System.Data.Linq.Table<VideoType> VideoTypes
		{
			get
			{
				return this.GetTable<VideoType>();
			}
		}
		
		public System.Data.Linq.Table<Artist> Artists
		{
			get
			{
				return this.GetTable<Artist>();
			}
		}
		
		public System.Data.Linq.Table<Audio> Audios
		{
			get
			{
				return this.GetTable<Audio>();
			}
		}
		
		public System.Data.Linq.Table<AudioArtist> AudioArtists
		{
			get
			{
				return this.GetTable<AudioArtist>();
			}
		}
		
		public System.Data.Linq.Table<AudioType> AudioTypes
		{
			get
			{
				return this.GetTable<AudioType>();
			}
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<BookAuthor> BookAuthors
		{
			get
			{
				return this.GetTable<BookAuthor>();
			}
		}
		
		public System.Data.Linq.Table<BookContent> BookContents
		{
			get
			{
				return this.GetTable<BookContent>();
			}
		}
		
		public System.Data.Linq.Table<BookPub> BookPubs
		{
			get
			{
				return this.GetTable<BookPub>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<Director> Directors
		{
			get
			{
				return this.GetTable<Director>();
			}
		}
		
		public System.Data.Linq.Table<KEY> KEYs
		{
			get
			{
				return this.GetTable<KEY>();
			}
		}
		
		public System.Data.Linq.Table<KeyType> KeyTypes
		{
			get
			{
				return this.GetTable<KeyType>();
			}
		}
		
		public System.Data.Linq.Table<MusicPub> MusicPubs
		{
			get
			{
				return this.GetTable<MusicPub>();
			}
		}
		
		public System.Data.Linq.Table<MusicTrack> MusicTracks
		{
			get
			{
				return this.GetTable<MusicTrack>();
			}
		}
		
		public System.Data.Linq.Table<Owner> Owners
		{
			get
			{
				return this.GetTable<Owner>();
			}
		}
		
		public System.Data.Linq.Table<Video> Videos
		{
			get
			{
				return this.GetTable<Video>();
			}
		}
		
		public System.Data.Linq.Table<VideoActor> VideoActors
		{
			get
			{
				return this.GetTable<VideoActor>();
			}
		}
		
		public System.Data.Linq.Table<SoftwareContent> SoftwareContents
		{
			get
			{
				return this.GetTable<SoftwareContent>();
			}
		}
		
		public System.Data.Linq.Table<SofwarePub> SofwarePubs
		{
			get
			{
				return this.GetTable<SofwarePub>();
			}
		}
		
		public System.Data.Linq.Table<MediaType> MediaTypes
		{
			get
			{
				return this.GetTable<MediaType>();
			}
		}
		
		public System.Data.Linq.Table<Software> Softwares
		{
			get
			{
				return this.GetTable<Software>();
			}
		}
		
		public System.Data.Linq.Table<ItemManufacturer> ItemManufacturers
		{
			get
			{
				return this.GetTable<ItemManufacturer>();
			}
		}
		
		public System.Data.Linq.Table<TransactionTypeTable> TransactionTypeTables
		{
			get
			{
				return this.GetTable<TransactionTypeTable>();
			}
		}
		
		public System.Data.Linq.Table<UserPreferenceTable> UserPreferenceTables
		{
			get
			{
				return this.GetTable<UserPreferenceTable>();
			}
		}
		
		public System.Data.Linq.Table<DocumentType> DocumentTypes
		{
			get
			{
				return this.GetTable<DocumentType>();
			}
		}
		
		public System.Data.Linq.Table<TransactionTable> TransactionTables
		{
			get
			{
				return this.GetTable<TransactionTable>();
			}
		}
		
		public System.Data.Linq.Table<Error> Errors
		{
			get
			{
				return this.GetTable<Error>();
			}
		}
		
		public System.Data.Linq.Table<ItemLoc> ItemLocs
		{
			get
			{
				return this.GetTable<ItemLoc>();
			}
		}
		
		public System.Data.Linq.Table<AccountTypeTable> AccountTypeTables
		{
			get
			{
				return this.GetTable<AccountTypeTable>();
			}
		}
		
		public System.Data.Linq.Table<LineItemStatusCode> LineItemStatusCodes
		{
			get
			{
				return this.GetTable<LineItemStatusCode>();
			}
		}
		
		public System.Data.Linq.Table<AccountGroupTable> AccountGroupTables
		{
			get
			{
				return this.GetTable<AccountGroupTable>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<AccountTable> AccountTables
		{
			get
			{
				return this.GetTable<AccountTable>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<DepositLine> DepositLines
		{
			get
			{
				return this.GetTable<DepositLine>();
			}
		}
		
		public System.Data.Linq.Table<ItemConditionCode> ItemConditionCodes
		{
			get
			{
				return this.GetTable<ItemConditionCode>();
			}
		}
		
		public System.Data.Linq.Table<TransLineItemStatus> TransLineItemStatus
		{
			get
			{
				return this.GetTable<TransLineItemStatus>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<SalesDoc> SalesDocs
		{
			get
			{
				return this.GetTable<SalesDoc>();
			}
		}
		
		public System.Data.Linq.Table<SalesDocStatus> SalesDocStatus
		{
			get
			{
				return this.GetTable<SalesDocStatus>();
			}
		}
		
		public System.Data.Linq.Table<TaxRate> TaxRates
		{
			get
			{
				return this.GetTable<TaxRate>();
			}
		}
		
		public System.Data.Linq.Table<ItemType> ItemTypes
		{
			get
			{
				return this.GetTable<ItemType>();
			}
		}
		
		public System.Data.Linq.Table<LocationType> LocationTypes
		{
			get
			{
				return this.GetTable<LocationType>();
			}
		}
		
		public System.Data.Linq.Table<ItemTypeRevExp> ItemTypeRevExps
		{
			get
			{
				return this.GetTable<ItemTypeRevExp>();
			}
		}
		
		public System.Data.Linq.Table<UserActSumView> UserActSumViews
		{
			get
			{
				return this.GetTable<UserActSumView>();
			}
		}
		
		public System.Data.Linq.Table<VendItem> VendItems
		{
			get
			{
				return this.GetTable<VendItem>();
			}
		}
		
		public System.Data.Linq.Table<ReceivableDoc> ReceivableDocs
		{
			get
			{
				return this.GetTable<ReceivableDoc>();
			}
		}
		
		public System.Data.Linq.Table<ContactTypeTable> ContactTypeTables
		{
			get
			{
				return this.GetTable<ContactTypeTable>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<ItemSN> ItemSNs
		{
			get
			{
				return this.GetTable<ItemSN>();
			}
		}
		
		public System.Data.Linq.Table<ServiceCreditType> ServiceCreditTypes
		{
			get
			{
				return this.GetTable<ServiceCreditType>();
			}
		}
		
		public System.Data.Linq.Table<ServiceCreditValue> ServiceCreditValues
		{
			get
			{
				return this.GetTable<ServiceCreditValue>();
			}
		}
		
		public System.Data.Linq.Table<ServiceCredit> ServiceCredits
		{
			get
			{
				return this.GetTable<ServiceCredit>();
			}
		}
		
		public System.Data.Linq.Table<JobLine> JobLines
		{
			get
			{
				return this.GetTable<JobLine>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<TransLineItem> TransLineItems
		{
			get
			{
				return this.GetTable<TransLineItem>();
			}
		}
		
		public System.Data.Linq.Table<PayMethod> PayMethods
		{
			get
			{
				return this.GetTable<PayMethod>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<TaxCollection> TaxCollections
		{
			get
			{
				return this.GetTable<TaxCollection>();
			}
		}
		
		public System.Data.Linq.Table<UserDateRange> UserDateRanges
		{
			get
			{
				return this.GetTable<UserDateRange>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Actor")]
	public partial class Actor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActorID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorIDChanging(int value);
    partial void OnActorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Actor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActorID
		{
			get
			{
				return this._ActorID;
			}
			set
			{
				if ((this._ActorID != value))
				{
					this.OnActorIDChanging(value);
					this.SendPropertyChanging();
					this._ActorID = value;
					this.SendPropertyChanged("ActorID");
					this.OnActorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VideoType")]
	public partial class VideoType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VideoTypeID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVideoTypeIDChanging(int value);
    partial void OnVideoTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public VideoType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VideoTypeID
		{
			get
			{
				return this._VideoTypeID;
			}
			set
			{
				if ((this._VideoTypeID != value))
				{
					this.OnVideoTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VideoTypeID = value;
					this.SendPropertyChanged("VideoTypeID");
					this.OnVideoTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artist")]
	public partial class Artist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArtistID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArtistIDChanging(int value);
    partial void OnArtistIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Artist()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtistID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArtistID
		{
			get
			{
				return this._ArtistID;
			}
			set
			{
				if ((this._ArtistID != value))
				{
					this.OnArtistIDChanging(value);
					this.SendPropertyChanging();
					this._ArtistID = value;
					this.SendPropertyChanged("ArtistID");
					this.OnArtistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Audio")]
	public partial class Audio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AudioID;
		
		private System.Nullable<int> _AudioTypeID;
		
		private string _Title;
		
		private System.Nullable<int> _ArtistID;
		
		private System.Nullable<int> _PublisherID;
		
		private System.Nullable<int> _Tracks;
		
		private System.Nullable<int> _UPC;
		
		private System.Nullable<int> _LocID;
		
		private System.Nullable<int> _OwnerID;
		
		private System.Nullable<decimal> _AudioCost;
		
		private System.Nullable<decimal> _AudioPrice;
		
		private System.Nullable<decimal> _AudioApprasial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAudioIDChanging(int value);
    partial void OnAudioIDChanged();
    partial void OnAudioTypeIDChanging(System.Nullable<int> value);
    partial void OnAudioTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnArtistIDChanging(System.Nullable<int> value);
    partial void OnArtistIDChanged();
    partial void OnPublisherIDChanging(System.Nullable<int> value);
    partial void OnPublisherIDChanged();
    partial void OnTracksChanging(System.Nullable<int> value);
    partial void OnTracksChanged();
    partial void OnUPCChanging(System.Nullable<int> value);
    partial void OnUPCChanged();
    partial void OnLocIDChanging(System.Nullable<int> value);
    partial void OnLocIDChanged();
    partial void OnOwnerIDChanging(System.Nullable<int> value);
    partial void OnOwnerIDChanged();
    partial void OnAudioCostChanging(System.Nullable<decimal> value);
    partial void OnAudioCostChanged();
    partial void OnAudioPriceChanging(System.Nullable<decimal> value);
    partial void OnAudioPriceChanged();
    partial void OnAudioApprasialChanging(System.Nullable<decimal> value);
    partial void OnAudioApprasialChanged();
    #endregion
		
		public Audio()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AudioID
		{
			get
			{
				return this._AudioID;
			}
			set
			{
				if ((this._AudioID != value))
				{
					this.OnAudioIDChanging(value);
					this.SendPropertyChanging();
					this._AudioID = value;
					this.SendPropertyChanged("AudioID");
					this.OnAudioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioTypeID", DbType="Int")]
		public System.Nullable<int> AudioTypeID
		{
			get
			{
				return this._AudioTypeID;
			}
			set
			{
				if ((this._AudioTypeID != value))
				{
					this.OnAudioTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AudioTypeID = value;
					this.SendPropertyChanged("AudioTypeID");
					this.OnAudioTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtistID", DbType="Int")]
		public System.Nullable<int> ArtistID
		{
			get
			{
				return this._ArtistID;
			}
			set
			{
				if ((this._ArtistID != value))
				{
					this.OnArtistIDChanging(value);
					this.SendPropertyChanging();
					this._ArtistID = value;
					this.SendPropertyChanged("ArtistID");
					this.OnArtistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", DbType="Int")]
		public System.Nullable<int> PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tracks", DbType="Int")]
		public System.Nullable<int> Tracks
		{
			get
			{
				return this._Tracks;
			}
			set
			{
				if ((this._Tracks != value))
				{
					this.OnTracksChanging(value);
					this.SendPropertyChanging();
					this._Tracks = value;
					this.SendPropertyChanged("Tracks");
					this.OnTracksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UPC", DbType="Int")]
		public System.Nullable<int> UPC
		{
			get
			{
				return this._UPC;
			}
			set
			{
				if ((this._UPC != value))
				{
					this.OnUPCChanging(value);
					this.SendPropertyChanging();
					this._UPC = value;
					this.SendPropertyChanged("UPC");
					this.OnUPCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocID", DbType="Int")]
		public System.Nullable<int> LocID
		{
			get
			{
				return this._LocID;
			}
			set
			{
				if ((this._LocID != value))
				{
					this.OnLocIDChanging(value);
					this.SendPropertyChanging();
					this._LocID = value;
					this.SendPropertyChanged("LocID");
					this.OnLocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioCost", DbType="Money")]
		public System.Nullable<decimal> AudioCost
		{
			get
			{
				return this._AudioCost;
			}
			set
			{
				if ((this._AudioCost != value))
				{
					this.OnAudioCostChanging(value);
					this.SendPropertyChanging();
					this._AudioCost = value;
					this.SendPropertyChanged("AudioCost");
					this.OnAudioCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioPrice", DbType="Money")]
		public System.Nullable<decimal> AudioPrice
		{
			get
			{
				return this._AudioPrice;
			}
			set
			{
				if ((this._AudioPrice != value))
				{
					this.OnAudioPriceChanging(value);
					this.SendPropertyChanging();
					this._AudioPrice = value;
					this.SendPropertyChanged("AudioPrice");
					this.OnAudioPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioApprasial", DbType="Money")]
		public System.Nullable<decimal> AudioApprasial
		{
			get
			{
				return this._AudioApprasial;
			}
			set
			{
				if ((this._AudioApprasial != value))
				{
					this.OnAudioApprasialChanging(value);
					this.SendPropertyChanging();
					this._AudioApprasial = value;
					this.SendPropertyChanged("AudioApprasial");
					this.OnAudioApprasialChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AudioArtist")]
	public partial class AudioArtist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AAID;
		
		private int _AudioID;
		
		private int _ArtistID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAAIDChanging(int value);
    partial void OnAAIDChanged();
    partial void OnAudioIDChanging(int value);
    partial void OnAudioIDChanged();
    partial void OnArtistIDChanging(int value);
    partial void OnArtistIDChanged();
    #endregion
		
		public AudioArtist()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AAID
		{
			get
			{
				return this._AAID;
			}
			set
			{
				if ((this._AAID != value))
				{
					this.OnAAIDChanging(value);
					this.SendPropertyChanging();
					this._AAID = value;
					this.SendPropertyChanged("AAID");
					this.OnAAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioID", DbType="Int NOT NULL")]
		public int AudioID
		{
			get
			{
				return this._AudioID;
			}
			set
			{
				if ((this._AudioID != value))
				{
					this.OnAudioIDChanging(value);
					this.SendPropertyChanging();
					this._AudioID = value;
					this.SendPropertyChanged("AudioID");
					this.OnAudioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtistID", DbType="Int NOT NULL")]
		public int ArtistID
		{
			get
			{
				return this._ArtistID;
			}
			set
			{
				if ((this._ArtistID != value))
				{
					this.OnArtistIDChanging(value);
					this.SendPropertyChanging();
					this._ArtistID = value;
					this.SendPropertyChanged("ArtistID");
					this.OnArtistIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AudioType")]
	public partial class AudioType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AudioTypeID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAudioTypeIDChanging(int value);
    partial void OnAudioTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AudioType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AudioTypeID
		{
			get
			{
				return this._AudioTypeID;
			}
			set
			{
				if ((this._AudioTypeID != value))
				{
					this.OnAudioTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AudioTypeID = value;
					this.SendPropertyChanged("AudioTypeID");
					this.OnAudioTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Author")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Author()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookAuthor")]
	public partial class BookAuthor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BAID;
		
		private int _BookID;
		
		private int _AuthorID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBAIDChanging(int value);
    partial void OnBAIDChanged();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    #endregion
		
		public BookAuthor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BAID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BAID
		{
			get
			{
				return this._BAID;
			}
			set
			{
				if ((this._BAID != value))
				{
					this.OnBAIDChanging(value);
					this.SendPropertyChanging();
					this._BAID = value;
					this.SendPropertyChanged("BAID");
					this.OnBAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL")]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", DbType="Int NOT NULL")]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookContent")]
	public partial class BookContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContentsID;
		
		private int _BookID;
		
		private string _Name;
		
		private System.Nullable<int> _PageNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentsIDChanging(int value);
    partial void OnContentsIDChanged();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPageNumberChanging(System.Nullable<int> value);
    partial void OnPageNumberChanged();
    #endregion
		
		public BookContent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContentsID
		{
			get
			{
				return this._ContentsID;
			}
			set
			{
				if ((this._ContentsID != value))
				{
					this.OnContentsIDChanging(value);
					this.SendPropertyChanging();
					this._ContentsID = value;
					this.SendPropertyChanged("ContentsID");
					this.OnContentsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL")]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageNumber", DbType="Int")]
		public System.Nullable<int> PageNumber
		{
			get
			{
				return this._PageNumber;
			}
			set
			{
				if ((this._PageNumber != value))
				{
					this.OnPageNumberChanging(value);
					this.SendPropertyChanging();
					this._PageNumber = value;
					this.SendPropertyChanged("PageNumber");
					this.OnPageNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookPub")]
	public partial class BookPub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookPubID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookPubIDChanging(int value);
    partial void OnBookPubIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BookPub()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookPubID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookPubID
		{
			get
			{
				return this._BookPubID;
			}
			set
			{
				if ((this._BookPubID != value))
				{
					this.OnBookPubIDChanging(value);
					this.SendPropertyChanging();
					this._BookPubID = value;
					this.SendPropertyChanged("BookPubID");
					this.OnBookPubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Books")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookID;
		
		private string _Title;
		
		private System.Nullable<int> _BookAuthorID;
		
		private System.Nullable<int> _PublisherID;
		
		private System.Nullable<int> _Pages;
		
		private System.Nullable<int> _ISBN;
		
		private System.Nullable<bool> _HardBack;
		
		private System.Nullable<int> _LocID;
		
		private System.Nullable<int> _OwnerID;
		
		private System.Nullable<decimal> _BookCost;
		
		private System.Nullable<decimal> _BookPrice;
		
		private System.Nullable<decimal> _BookApprasial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBookAuthorIDChanging(System.Nullable<int> value);
    partial void OnBookAuthorIDChanged();
    partial void OnPublisherIDChanging(System.Nullable<int> value);
    partial void OnPublisherIDChanged();
    partial void OnPagesChanging(System.Nullable<int> value);
    partial void OnPagesChanged();
    partial void OnISBNChanging(System.Nullable<int> value);
    partial void OnISBNChanged();
    partial void OnHardBackChanging(System.Nullable<bool> value);
    partial void OnHardBackChanged();
    partial void OnLocIDChanging(System.Nullable<int> value);
    partial void OnLocIDChanged();
    partial void OnOwnerIDChanging(System.Nullable<int> value);
    partial void OnOwnerIDChanged();
    partial void OnBookCostChanging(System.Nullable<decimal> value);
    partial void OnBookCostChanged();
    partial void OnBookPriceChanging(System.Nullable<decimal> value);
    partial void OnBookPriceChanged();
    partial void OnBookApprasialChanging(System.Nullable<decimal> value);
    partial void OnBookApprasialChanged();
    #endregion
		
		public Book()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookAuthorID", DbType="Int")]
		public System.Nullable<int> BookAuthorID
		{
			get
			{
				return this._BookAuthorID;
			}
			set
			{
				if ((this._BookAuthorID != value))
				{
					this.OnBookAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._BookAuthorID = value;
					this.SendPropertyChanged("BookAuthorID");
					this.OnBookAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", DbType="Int")]
		public System.Nullable<int> PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pages", DbType="Int")]
		public System.Nullable<int> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				if ((this._Pages != value))
				{
					this.OnPagesChanging(value);
					this.SendPropertyChanging();
					this._Pages = value;
					this.SendPropertyChanged("Pages");
					this.OnPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISBN", DbType="Int")]
		public System.Nullable<int> ISBN
		{
			get
			{
				return this._ISBN;
			}
			set
			{
				if ((this._ISBN != value))
				{
					this.OnISBNChanging(value);
					this.SendPropertyChanging();
					this._ISBN = value;
					this.SendPropertyChanged("ISBN");
					this.OnISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HardBack", DbType="Bit")]
		public System.Nullable<bool> HardBack
		{
			get
			{
				return this._HardBack;
			}
			set
			{
				if ((this._HardBack != value))
				{
					this.OnHardBackChanging(value);
					this.SendPropertyChanging();
					this._HardBack = value;
					this.SendPropertyChanged("HardBack");
					this.OnHardBackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocID", DbType="Int")]
		public System.Nullable<int> LocID
		{
			get
			{
				return this._LocID;
			}
			set
			{
				if ((this._LocID != value))
				{
					this.OnLocIDChanging(value);
					this.SendPropertyChanging();
					this._LocID = value;
					this.SendPropertyChanged("LocID");
					this.OnLocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookCost", DbType="Money")]
		public System.Nullable<decimal> BookCost
		{
			get
			{
				return this._BookCost;
			}
			set
			{
				if ((this._BookCost != value))
				{
					this.OnBookCostChanging(value);
					this.SendPropertyChanging();
					this._BookCost = value;
					this.SendPropertyChanged("BookCost");
					this.OnBookCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookPrice", DbType="Money")]
		public System.Nullable<decimal> BookPrice
		{
			get
			{
				return this._BookPrice;
			}
			set
			{
				if ((this._BookPrice != value))
				{
					this.OnBookPriceChanging(value);
					this.SendPropertyChanging();
					this._BookPrice = value;
					this.SendPropertyChanged("BookPrice");
					this.OnBookPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookApprasial", DbType="Money")]
		public System.Nullable<decimal> BookApprasial
		{
			get
			{
				return this._BookApprasial;
			}
			set
			{
				if ((this._BookApprasial != value))
				{
					this.OnBookApprasialChanging(value);
					this.SendPropertyChanging();
					this._BookApprasial = value;
					this.SendPropertyChanged("BookApprasial");
					this.OnBookApprasialChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Director")]
	public partial class Director : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DirectorID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDirectorIDChanging(int value);
    partial void OnDirectorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Director()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DirectorID
		{
			get
			{
				return this._DirectorID;
			}
			set
			{
				if ((this._DirectorID != value))
				{
					this.OnDirectorIDChanging(value);
					this.SendPropertyChanging();
					this._DirectorID = value;
					this.SendPropertyChanged("DirectorID");
					this.OnDirectorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[KEY]")]
	public partial class KEY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KeyID;
		
		private int _KeyTypeID;
		
		private string _KeyName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyIDChanging(int value);
    partial void OnKeyIDChanged();
    partial void OnKeyTypeIDChanging(int value);
    partial void OnKeyTypeIDChanged();
    partial void OnKeyNameChanging(string value);
    partial void OnKeyNameChanged();
    #endregion
		
		public KEY()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KeyID
		{
			get
			{
				return this._KeyID;
			}
			set
			{
				if ((this._KeyID != value))
				{
					this.OnKeyIDChanging(value);
					this.SendPropertyChanging();
					this._KeyID = value;
					this.SendPropertyChanged("KeyID");
					this.OnKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyTypeID", DbType="Int NOT NULL")]
		public int KeyTypeID
		{
			get
			{
				return this._KeyTypeID;
			}
			set
			{
				if ((this._KeyTypeID != value))
				{
					this.OnKeyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._KeyTypeID = value;
					this.SendPropertyChanged("KeyTypeID");
					this.OnKeyTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string KeyName
		{
			get
			{
				return this._KeyName;
			}
			set
			{
				if ((this._KeyName != value))
				{
					this.OnKeyNameChanging(value);
					this.SendPropertyChanging();
					this._KeyName = value;
					this.SendPropertyChanged("KeyName");
					this.OnKeyNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KeyType")]
	public partial class KeyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KeyTypeID;
		
		private string _KeyTypeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyTypeIDChanging(int value);
    partial void OnKeyTypeIDChanged();
    partial void OnKeyTypeNameChanging(string value);
    partial void OnKeyTypeNameChanged();
    #endregion
		
		public KeyType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KeyTypeID
		{
			get
			{
				return this._KeyTypeID;
			}
			set
			{
				if ((this._KeyTypeID != value))
				{
					this.OnKeyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._KeyTypeID = value;
					this.SendPropertyChanged("KeyTypeID");
					this.OnKeyTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string KeyTypeName
		{
			get
			{
				return this._KeyTypeName;
			}
			set
			{
				if ((this._KeyTypeName != value))
				{
					this.OnKeyTypeNameChanging(value);
					this.SendPropertyChanging();
					this._KeyTypeName = value;
					this.SendPropertyChanged("KeyTypeName");
					this.OnKeyTypeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MusicPub")]
	public partial class MusicPub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MusicPub1;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMusicPub1Changing(int value);
    partial void OnMusicPub1Changed();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MusicPub()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MusicPub", Storage="_MusicPub1", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MusicPub1
		{
			get
			{
				return this._MusicPub1;
			}
			set
			{
				if ((this._MusicPub1 != value))
				{
					this.OnMusicPub1Changing(value);
					this.SendPropertyChanging();
					this._MusicPub1 = value;
					this.SendPropertyChanged("MusicPub1");
					this.OnMusicPub1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MusicTrack")]
	public partial class MusicTrack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrackID;
		
		private int _AudioID;
		
		private string _Name;
		
		private string _RunTime;
		
		private System.Nullable<int> _PlayOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrackIDChanging(int value);
    partial void OnTrackIDChanged();
    partial void OnAudioIDChanging(int value);
    partial void OnAudioIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRunTimeChanging(string value);
    partial void OnRunTimeChanged();
    partial void OnPlayOrderChanging(System.Nullable<int> value);
    partial void OnPlayOrderChanged();
    #endregion
		
		public MusicTrack()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrackID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrackID
		{
			get
			{
				return this._TrackID;
			}
			set
			{
				if ((this._TrackID != value))
				{
					this.OnTrackIDChanging(value);
					this.SendPropertyChanging();
					this._TrackID = value;
					this.SendPropertyChanged("TrackID");
					this.OnTrackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioID", DbType="Int NOT NULL")]
		public int AudioID
		{
			get
			{
				return this._AudioID;
			}
			set
			{
				if ((this._AudioID != value))
				{
					this.OnAudioIDChanging(value);
					this.SendPropertyChanging();
					this._AudioID = value;
					this.SendPropertyChanged("AudioID");
					this.OnAudioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunTime", DbType="NVarChar(50)")]
		public string RunTime
		{
			get
			{
				return this._RunTime;
			}
			set
			{
				if ((this._RunTime != value))
				{
					this.OnRunTimeChanging(value);
					this.SendPropertyChanging();
					this._RunTime = value;
					this.SendPropertyChanged("RunTime");
					this.OnRunTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayOrder", DbType="Int")]
		public System.Nullable<int> PlayOrder
		{
			get
			{
				return this._PlayOrder;
			}
			set
			{
				if ((this._PlayOrder != value))
				{
					this.OnPlayOrderChanging(value);
					this.SendPropertyChanging();
					this._PlayOrder = value;
					this.SendPropertyChanged("PlayOrder");
					this.OnPlayOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Owner")]
	public partial class Owner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Owner()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Video")]
	public partial class Video : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VideoID;
		
		private System.Nullable<int> _VideoTypeID;
		
		private string _Title;
		
		private System.Nullable<int> _DirectorID;
		
		private System.Nullable<int> _PublisherID;
		
		private string _RunTime;
		
		private System.Nullable<int> _UPC;
		
		private System.Nullable<int> _OwnerID;
		
		private System.Nullable<decimal> _Cost;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _Apprasial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVideoIDChanging(int value);
    partial void OnVideoIDChanged();
    partial void OnVideoTypeIDChanging(System.Nullable<int> value);
    partial void OnVideoTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDirectorIDChanging(System.Nullable<int> value);
    partial void OnDirectorIDChanged();
    partial void OnPublisherIDChanging(System.Nullable<int> value);
    partial void OnPublisherIDChanged();
    partial void OnRunTimeChanging(string value);
    partial void OnRunTimeChanged();
    partial void OnUPCChanging(System.Nullable<int> value);
    partial void OnUPCChanged();
    partial void OnOwnerIDChanging(System.Nullable<int> value);
    partial void OnOwnerIDChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnApprasialChanging(System.Nullable<decimal> value);
    partial void OnApprasialChanged();
    #endregion
		
		public Video()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VideoID
		{
			get
			{
				return this._VideoID;
			}
			set
			{
				if ((this._VideoID != value))
				{
					this.OnVideoIDChanging(value);
					this.SendPropertyChanging();
					this._VideoID = value;
					this.SendPropertyChanged("VideoID");
					this.OnVideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoTypeID", DbType="Int")]
		public System.Nullable<int> VideoTypeID
		{
			get
			{
				return this._VideoTypeID;
			}
			set
			{
				if ((this._VideoTypeID != value))
				{
					this.OnVideoTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VideoTypeID = value;
					this.SendPropertyChanged("VideoTypeID");
					this.OnVideoTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(256)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectorID", DbType="Int")]
		public System.Nullable<int> DirectorID
		{
			get
			{
				return this._DirectorID;
			}
			set
			{
				if ((this._DirectorID != value))
				{
					this.OnDirectorIDChanging(value);
					this.SendPropertyChanging();
					this._DirectorID = value;
					this.SendPropertyChanged("DirectorID");
					this.OnDirectorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", DbType="Int")]
		public System.Nullable<int> PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunTime", DbType="VarChar(50)")]
		public string RunTime
		{
			get
			{
				return this._RunTime;
			}
			set
			{
				if ((this._RunTime != value))
				{
					this.OnRunTimeChanging(value);
					this.SendPropertyChanging();
					this._RunTime = value;
					this.SendPropertyChanged("RunTime");
					this.OnRunTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UPC", DbType="Int")]
		public System.Nullable<int> UPC
		{
			get
			{
				return this._UPC;
			}
			set
			{
				if ((this._UPC != value))
				{
					this.OnUPCChanging(value);
					this.SendPropertyChanging();
					this._UPC = value;
					this.SendPropertyChanged("UPC");
					this.OnUPCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apprasial", DbType="Money")]
		public System.Nullable<decimal> Apprasial
		{
			get
			{
				return this._Apprasial;
			}
			set
			{
				if ((this._Apprasial != value))
				{
					this.OnApprasialChanging(value);
					this.SendPropertyChanging();
					this._Apprasial = value;
					this.SendPropertyChanged("Apprasial");
					this.OnApprasialChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VideoActor")]
	public partial class VideoActor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VAID;
		
		private int _VideoID;
		
		private int _ActorID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVAIDChanging(int value);
    partial void OnVAIDChanged();
    partial void OnVideoIDChanging(int value);
    partial void OnVideoIDChanged();
    partial void OnActorIDChanging(int value);
    partial void OnActorIDChanged();
    #endregion
		
		public VideoActor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VAID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VAID
		{
			get
			{
				return this._VAID;
			}
			set
			{
				if ((this._VAID != value))
				{
					this.OnVAIDChanging(value);
					this.SendPropertyChanging();
					this._VAID = value;
					this.SendPropertyChanged("VAID");
					this.OnVAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoID", DbType="Int NOT NULL")]
		public int VideoID
		{
			get
			{
				return this._VideoID;
			}
			set
			{
				if ((this._VideoID != value))
				{
					this.OnVideoIDChanging(value);
					this.SendPropertyChanging();
					this._VideoID = value;
					this.SendPropertyChanged("VideoID");
					this.OnVideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorID", DbType="Int NOT NULL")]
		public int ActorID
		{
			get
			{
				return this._ActorID;
			}
			set
			{
				if ((this._ActorID != value))
				{
					this.OnActorIDChanging(value);
					this.SendPropertyChanging();
					this._ActorID = value;
					this.SendPropertyChanged("ActorID");
					this.OnActorIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SoftwareContent")]
	public partial class SoftwareContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContentID;
		
		private int _SoftwareID;
		
		private string _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentIDChanging(int value);
    partial void OnContentIDChanged();
    partial void OnSoftwareIDChanging(int value);
    partial void OnSoftwareIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public SoftwareContent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					this.OnContentIDChanging(value);
					this.SendPropertyChanging();
					this._ContentID = value;
					this.SendPropertyChanged("ContentID");
					this.OnContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftwareID", DbType="Int NOT NULL")]
		public int SoftwareID
		{
			get
			{
				return this._SoftwareID;
			}
			set
			{
				if ((this._SoftwareID != value))
				{
					this.OnSoftwareIDChanging(value);
					this.SendPropertyChanging();
					this._SoftwareID = value;
					this.SendPropertyChanged("SoftwareID");
					this.OnSoftwareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SofwarePub")]
	public partial class SofwarePub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SoftPubID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSoftPubIDChanging(int value);
    partial void OnSoftPubIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SofwarePub()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftPubID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SoftPubID
		{
			get
			{
				return this._SoftPubID;
			}
			set
			{
				if ((this._SoftPubID != value))
				{
					this.OnSoftPubIDChanging(value);
					this.SendPropertyChanging();
					this._SoftPubID = value;
					this.SendPropertyChanged("SoftPubID");
					this.OnSoftPubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MediaType")]
	public partial class MediaType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MediaTypeID;
		
		private string _MediaTypeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaTypeIDChanging(int value);
    partial void OnMediaTypeIDChanged();
    partial void OnMediaTypeNameChanging(string value);
    partial void OnMediaTypeNameChanged();
    #endregion
		
		public MediaType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MediaTypeID
		{
			get
			{
				return this._MediaTypeID;
			}
			set
			{
				if ((this._MediaTypeID != value))
				{
					this.OnMediaTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeID = value;
					this.SendPropertyChanged("MediaTypeID");
					this.OnMediaTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MediaTypeName
		{
			get
			{
				return this._MediaTypeName;
			}
			set
			{
				if ((this._MediaTypeName != value))
				{
					this.OnMediaTypeNameChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeName = value;
					this.SendPropertyChanged("MediaTypeName");
					this.OnMediaTypeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Software")]
	public partial class Software : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SoftwareID;
		
		private string _Title;
		
		private System.Nullable<int> _ISBN;
		
		private System.Nullable<int> _PublisherID;
		
		private System.Nullable<int> _MediaTypeID;
		
		private System.Nullable<int> _LocID;
		
		private System.Nullable<int> _OwnerID;
		
		private System.Nullable<decimal> _Cost;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _Appraisal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSoftwareIDChanging(int value);
    partial void OnSoftwareIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnISBNChanging(System.Nullable<int> value);
    partial void OnISBNChanged();
    partial void OnPublisherIDChanging(System.Nullable<int> value);
    partial void OnPublisherIDChanged();
    partial void OnMediaTypeIDChanging(System.Nullable<int> value);
    partial void OnMediaTypeIDChanged();
    partial void OnLocIDChanging(System.Nullable<int> value);
    partial void OnLocIDChanged();
    partial void OnOwnerIDChanging(System.Nullable<int> value);
    partial void OnOwnerIDChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnAppraisalChanging(System.Nullable<decimal> value);
    partial void OnAppraisalChanged();
    #endregion
		
		public Software()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftwareID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SoftwareID
		{
			get
			{
				return this._SoftwareID;
			}
			set
			{
				if ((this._SoftwareID != value))
				{
					this.OnSoftwareIDChanging(value);
					this.SendPropertyChanging();
					this._SoftwareID = value;
					this.SendPropertyChanged("SoftwareID");
					this.OnSoftwareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISBN", DbType="Int")]
		public System.Nullable<int> ISBN
		{
			get
			{
				return this._ISBN;
			}
			set
			{
				if ((this._ISBN != value))
				{
					this.OnISBNChanging(value);
					this.SendPropertyChanging();
					this._ISBN = value;
					this.SendPropertyChanged("ISBN");
					this.OnISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", DbType="Int")]
		public System.Nullable<int> PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaTypeID", DbType="Int")]
		public System.Nullable<int> MediaTypeID
		{
			get
			{
				return this._MediaTypeID;
			}
			set
			{
				if ((this._MediaTypeID != value))
				{
					this.OnMediaTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeID = value;
					this.SendPropertyChanged("MediaTypeID");
					this.OnMediaTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocID", DbType="Int")]
		public System.Nullable<int> LocID
		{
			get
			{
				return this._LocID;
			}
			set
			{
				if ((this._LocID != value))
				{
					this.OnLocIDChanging(value);
					this.SendPropertyChanging();
					this._LocID = value;
					this.SendPropertyChanged("LocID");
					this.OnLocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appraisal", DbType="Money")]
		public System.Nullable<decimal> Appraisal
		{
			get
			{
				return this._Appraisal;
			}
			set
			{
				if ((this._Appraisal != value))
				{
					this.OnAppraisalChanging(value);
					this.SendPropertyChanging();
					this._Appraisal = value;
					this.SendPropertyChanged("Appraisal");
					this.OnAppraisalChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemManufacturer")]
	public partial class ItemManufacturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaunufacturerID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaunufacturerIDChanging(int value);
    partial void OnMaunufacturerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ItemManufacturer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaunufacturerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaunufacturerID
		{
			get
			{
				return this._MaunufacturerID;
			}
			set
			{
				if ((this._MaunufacturerID != value))
				{
					this.OnMaunufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._MaunufacturerID = value;
					this.SendPropertyChanged("MaunufacturerID");
					this.OnMaunufacturerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionTypeTable")]
	public partial class TransactionTypeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransactionTypeID;
		
		private string _TransactionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionTypeIDChanging(int value);
    partial void OnTransactionTypeIDChanged();
    partial void OnTransactionTypeChanging(string value);
    partial void OnTransactionTypeChanged();
    #endregion
		
		public TransactionTypeTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransactionTypeID
		{
			get
			{
				return this._TransactionTypeID;
			}
			set
			{
				if ((this._TransactionTypeID != value))
				{
					this.OnTransactionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionTypeID = value;
					this.SendPropertyChanged("TransactionTypeID");
					this.OnTransactionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPreferenceTable")]
	public partial class UserPreferenceTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PreferenceID;
		
		private string _UserName;
		
		private int _PrefOption;
		
		private int _Preference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPreferenceIDChanging(int value);
    partial void OnPreferenceIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPrefOptionChanging(int value);
    partial void OnPrefOptionChanged();
    partial void OnPreferenceChanging(int value);
    partial void OnPreferenceChanged();
    #endregion
		
		public UserPreferenceTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferenceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PreferenceID
		{
			get
			{
				return this._PreferenceID;
			}
			set
			{
				if ((this._PreferenceID != value))
				{
					this.OnPreferenceIDChanging(value);
					this.SendPropertyChanging();
					this._PreferenceID = value;
					this.SendPropertyChanged("PreferenceID");
					this.OnPreferenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrefOption", DbType="Int NOT NULL")]
		public int PrefOption
		{
			get
			{
				return this._PrefOption;
			}
			set
			{
				if ((this._PrefOption != value))
				{
					this.OnPrefOptionChanging(value);
					this.SendPropertyChanging();
					this._PrefOption = value;
					this.SendPropertyChanged("PrefOption");
					this.OnPrefOptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Preference", DbType="Int NOT NULL")]
		public int Preference
		{
			get
			{
				return this._Preference;
			}
			set
			{
				if ((this._Preference != value))
				{
					this.OnPreferenceChanging(value);
					this.SendPropertyChanging();
					this._Preference = value;
					this.SendPropertyChanged("Preference");
					this.OnPreferenceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentType")]
	public partial class DocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentTypeID;
		
		private string _DocType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnDocTypeChanging(string value);
    partial void OnDocTypeChanged();
    #endregion
		
		public DocumentType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DocType
		{
			get
			{
				return this._DocType;
			}
			set
			{
				if ((this._DocType != value))
				{
					this.OnDocTypeChanging(value);
					this.SendPropertyChanging();
					this._DocType = value;
					this.SendPropertyChanged("DocType");
					this.OnDocTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionTable")]
	public partial class TransactionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransactionID;
		
		private int _TransactionTypeID;
		
		private int _DocumentID;
		
		private int _DebitID;
		
		private int _CreditID;
		
		private decimal _Amount;
		
		private string _Description;
		
		private string _EnteredBy;
		
		private System.DateTime _EnterDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(int value);
    partial void OnTransactionIDChanged();
    partial void OnTransactionTypeIDChanging(int value);
    partial void OnTransactionTypeIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnDebitIDChanging(int value);
    partial void OnDebitIDChanged();
    partial void OnCreditIDChanging(int value);
    partial void OnCreditIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEnteredByChanging(string value);
    partial void OnEnteredByChanged();
    partial void OnEnterDateChanging(System.DateTime value);
    partial void OnEnterDateChanged();
    #endregion
		
		public TransactionTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionTypeID", DbType="Int NOT NULL")]
		public int TransactionTypeID
		{
			get
			{
				return this._TransactionTypeID;
			}
			set
			{
				if ((this._TransactionTypeID != value))
				{
					this.OnTransactionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionTypeID = value;
					this.SendPropertyChanged("TransactionTypeID");
					this.OnTransactionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebitID", DbType="Int NOT NULL")]
		public int DebitID
		{
			get
			{
				return this._DebitID;
			}
			set
			{
				if ((this._DebitID != value))
				{
					this.OnDebitIDChanging(value);
					this.SendPropertyChanging();
					this._DebitID = value;
					this.SendPropertyChanged("DebitID");
					this.OnDebitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditID", DbType="Int NOT NULL")]
		public int CreditID
		{
			get
			{
				return this._CreditID;
			}
			set
			{
				if ((this._CreditID != value))
				{
					this.OnCreditIDChanging(value);
					this.SendPropertyChanging();
					this._CreditID = value;
					this.SendPropertyChanged("CreditID");
					this.OnCreditIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EnteredBy
		{
			get
			{
				return this._EnteredBy;
			}
			set
			{
				if ((this._EnteredBy != value))
				{
					this.OnEnteredByChanging(value);
					this.SendPropertyChanging();
					this._EnteredBy = value;
					this.SendPropertyChanged("EnteredBy");
					this.OnEnteredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterDate", DbType="DateTime NOT NULL")]
		public System.DateTime EnterDate
		{
			get
			{
				return this._EnterDate;
			}
			set
			{
				if ((this._EnterDate != value))
				{
					this.OnEnterDateChanging(value);
					this.SendPropertyChanging();
					this._EnterDate = value;
					this.SendPropertyChanged("EnterDate");
					this.OnEnterDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Error")]
	public partial class Error : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorID;
		
		private string _ErrorUser;
		
		private string _ErrorModule;
		
		private string _ModuleInput;
		
		private string _ErrorHelpLink;
		
		private string _ErrorInnerException;
		
		private string _ErrorMessage;
		
		private string _ErrorSource;
		
		private string _ErrorStack;
		
		private System.Nullable<System.DateTime> _ErrorTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIDChanging(int value);
    partial void OnErrorIDChanged();
    partial void OnErrorUserChanging(string value);
    partial void OnErrorUserChanged();
    partial void OnErrorModuleChanging(string value);
    partial void OnErrorModuleChanged();
    partial void OnModuleInputChanging(string value);
    partial void OnModuleInputChanged();
    partial void OnErrorHelpLinkChanging(string value);
    partial void OnErrorHelpLinkChanged();
    partial void OnErrorInnerExceptionChanging(string value);
    partial void OnErrorInnerExceptionChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    partial void OnErrorSourceChanging(string value);
    partial void OnErrorSourceChanged();
    partial void OnErrorStackChanging(string value);
    partial void OnErrorStackChanged();
    partial void OnErrorTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnErrorTimeChanged();
    #endregion
		
		public Error()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorID
		{
			get
			{
				return this._ErrorID;
			}
			set
			{
				if ((this._ErrorID != value))
				{
					this.OnErrorIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorID = value;
					this.SendPropertyChanged("ErrorID");
					this.OnErrorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorUser", DbType="VarChar(50)")]
		public string ErrorUser
		{
			get
			{
				return this._ErrorUser;
			}
			set
			{
				if ((this._ErrorUser != value))
				{
					this.OnErrorUserChanging(value);
					this.SendPropertyChanging();
					this._ErrorUser = value;
					this.SendPropertyChanged("ErrorUser");
					this.OnErrorUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorModule", DbType="VarChar(150)")]
		public string ErrorModule
		{
			get
			{
				return this._ErrorModule;
			}
			set
			{
				if ((this._ErrorModule != value))
				{
					this.OnErrorModuleChanging(value);
					this.SendPropertyChanging();
					this._ErrorModule = value;
					this.SendPropertyChanged("ErrorModule");
					this.OnErrorModuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleInput", DbType="VarChar(250)")]
		public string ModuleInput
		{
			get
			{
				return this._ModuleInput;
			}
			set
			{
				if ((this._ModuleInput != value))
				{
					this.OnModuleInputChanging(value);
					this.SendPropertyChanging();
					this._ModuleInput = value;
					this.SendPropertyChanged("ModuleInput");
					this.OnModuleInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorHelpLink", DbType="VarChar(MAX)")]
		public string ErrorHelpLink
		{
			get
			{
				return this._ErrorHelpLink;
			}
			set
			{
				if ((this._ErrorHelpLink != value))
				{
					this.OnErrorHelpLinkChanging(value);
					this.SendPropertyChanging();
					this._ErrorHelpLink = value;
					this.SendPropertyChanged("ErrorHelpLink");
					this.OnErrorHelpLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorInnerException", DbType="VarChar(MAX)")]
		public string ErrorInnerException
		{
			get
			{
				return this._ErrorInnerException;
			}
			set
			{
				if ((this._ErrorInnerException != value))
				{
					this.OnErrorInnerExceptionChanging(value);
					this.SendPropertyChanging();
					this._ErrorInnerException = value;
					this.SendPropertyChanged("ErrorInnerException");
					this.OnErrorInnerExceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="VarChar(MAX)")]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorSource", DbType="VarChar(MAX)")]
		public string ErrorSource
		{
			get
			{
				return this._ErrorSource;
			}
			set
			{
				if ((this._ErrorSource != value))
				{
					this.OnErrorSourceChanging(value);
					this.SendPropertyChanging();
					this._ErrorSource = value;
					this.SendPropertyChanged("ErrorSource");
					this.OnErrorSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorStack", DbType="VarChar(MAX)")]
		public string ErrorStack
		{
			get
			{
				return this._ErrorStack;
			}
			set
			{
				if ((this._ErrorStack != value))
				{
					this.OnErrorStackChanging(value);
					this.SendPropertyChanging();
					this._ErrorStack = value;
					this.SendPropertyChanged("ErrorStack");
					this.OnErrorStackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ErrorTime
		{
			get
			{
				return this._ErrorTime;
			}
			set
			{
				if ((this._ErrorTime != value))
				{
					this.OnErrorTimeChanging(value);
					this.SendPropertyChanging();
					this._ErrorTime = value;
					this.SendPropertyChanged("ErrorTime");
					this.OnErrorTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemLoc")]
	public partial class ItemLoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemLocID;
		
		private int _ItemID;
		
		private int _LocID;
		
		private decimal _Quantity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemLocIDChanging(int value);
    partial void OnItemLocIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnLocIDChanging(int value);
    partial void OnLocIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    #endregion
		
		public ItemLoc()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemLocID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemLocID
		{
			get
			{
				return this._ItemLocID;
			}
			set
			{
				if ((this._ItemLocID != value))
				{
					this.OnItemLocIDChanging(value);
					this.SendPropertyChanging();
					this._ItemLocID = value;
					this.SendPropertyChanged("ItemLocID");
					this.OnItemLocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocID", DbType="Int NOT NULL")]
		public int LocID
		{
			get
			{
				return this._LocID;
			}
			set
			{
				if ((this._LocID != value))
				{
					this.OnLocIDChanging(value);
					this.SendPropertyChanging();
					this._LocID = value;
					this.SendPropertyChanged("LocID");
					this.OnLocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,4) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTypeTable")]
	public partial class AccountTypeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AcctTypeID;
		
		private string _AcctType;
		
		private System.Nullable<bool> _Removable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcctTypeIDChanging(int value);
    partial void OnAcctTypeIDChanged();
    partial void OnAcctTypeChanging(string value);
    partial void OnAcctTypeChanged();
    partial void OnRemovableChanging(System.Nullable<bool> value);
    partial void OnRemovableChanged();
    #endregion
		
		public AccountTypeTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AcctTypeID
		{
			get
			{
				return this._AcctTypeID;
			}
			set
			{
				if ((this._AcctTypeID != value))
				{
					this.OnAcctTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AcctTypeID = value;
					this.SendPropertyChanged("AcctTypeID");
					this.OnAcctTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AcctType
		{
			get
			{
				return this._AcctType;
			}
			set
			{
				if ((this._AcctType != value))
				{
					this.OnAcctTypeChanging(value);
					this.SendPropertyChanging();
					this._AcctType = value;
					this.SendPropertyChanged("AcctType");
					this.OnAcctTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Removable", DbType="Bit")]
		public System.Nullable<bool> Removable
		{
			get
			{
				return this._Removable;
			}
			set
			{
				if ((this._Removable != value))
				{
					this.OnRemovableChanging(value);
					this.SendPropertyChanging();
					this._Removable = value;
					this.SendPropertyChanged("Removable");
					this.OnRemovableChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LineItemStatusCode")]
	public partial class LineItemStatusCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LineItemStatusID;
		
		private string _LineItemStatus;
		
		private bool _Removable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLineItemStatusIDChanging(int value);
    partial void OnLineItemStatusIDChanged();
    partial void OnLineItemStatusChanging(string value);
    partial void OnLineItemStatusChanged();
    partial void OnRemovableChanging(bool value);
    partial void OnRemovableChanged();
    #endregion
		
		public LineItemStatusCode()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineItemStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LineItemStatusID
		{
			get
			{
				return this._LineItemStatusID;
			}
			set
			{
				if ((this._LineItemStatusID != value))
				{
					this.OnLineItemStatusIDChanging(value);
					this.SendPropertyChanging();
					this._LineItemStatusID = value;
					this.SendPropertyChanged("LineItemStatusID");
					this.OnLineItemStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineItemStatus", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LineItemStatus
		{
			get
			{
				return this._LineItemStatus;
			}
			set
			{
				if ((this._LineItemStatus != value))
				{
					this.OnLineItemStatusChanging(value);
					this.SendPropertyChanging();
					this._LineItemStatus = value;
					this.SendPropertyChanged("LineItemStatus");
					this.OnLineItemStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Removable", DbType="Bit NOT NULL")]
		public bool Removable
		{
			get
			{
				return this._Removable;
			}
			set
			{
				if ((this._Removable != value))
				{
					this.OnRemovableChanging(value);
					this.SendPropertyChanging();
					this._Removable = value;
					this.SendPropertyChanged("Removable");
					this.OnRemovableChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountGroupTable")]
	public partial class AccountGroupTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountGroupID;
		
		private int _ParentAccountID;
		
		private int _ChildAccountID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountGroupIDChanging(int value);
    partial void OnAccountGroupIDChanged();
    partial void OnParentAccountIDChanging(int value);
    partial void OnParentAccountIDChanged();
    partial void OnChildAccountIDChanging(int value);
    partial void OnChildAccountIDChanged();
    #endregion
		
		public AccountGroupTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountGroupID
		{
			get
			{
				return this._AccountGroupID;
			}
			set
			{
				if ((this._AccountGroupID != value))
				{
					this.OnAccountGroupIDChanging(value);
					this.SendPropertyChanging();
					this._AccountGroupID = value;
					this.SendPropertyChanged("AccountGroupID");
					this.OnAccountGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentAccountID", DbType="Int NOT NULL")]
		public int ParentAccountID
		{
			get
			{
				return this._ParentAccountID;
			}
			set
			{
				if ((this._ParentAccountID != value))
				{
					this.OnParentAccountIDChanging(value);
					this.SendPropertyChanging();
					this._ParentAccountID = value;
					this.SendPropertyChanged("ParentAccountID");
					this.OnParentAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildAccountID", DbType="Int NOT NULL")]
		public int ChildAccountID
		{
			get
			{
				return this._ChildAccountID;
			}
			set
			{
				if ((this._ChildAccountID != value))
				{
					this.OnChildAccountIDChanging(value);
					this.SendPropertyChanging();
					this._ChildAccountID = value;
					this.SendPropertyChanged("ChildAccountID");
					this.OnChildAccountIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentID;
		
		private int _DocumentTypeID;
		
		private int _ParentDocumentID;
		
		private System.DateTime _DocumentTime;
		
		private decimal _Amount;
		
		private int _PaymentMethodID;
		
		private string _DocumentReference;
		
		private string _DocumentPath;
		
		private string _EnteredBy;
		
		private System.DateTime _TimeEntered;
		
		private bool _Reconciled;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnParentDocumentIDChanging(int value);
    partial void OnParentDocumentIDChanged();
    partial void OnDocumentTimeChanging(System.DateTime value);
    partial void OnDocumentTimeChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnPaymentMethodIDChanging(int value);
    partial void OnPaymentMethodIDChanged();
    partial void OnDocumentReferenceChanging(string value);
    partial void OnDocumentReferenceChanged();
    partial void OnDocumentPathChanging(string value);
    partial void OnDocumentPathChanged();
    partial void OnEnteredByChanging(string value);
    partial void OnEnteredByChanged();
    partial void OnTimeEnteredChanging(System.DateTime value);
    partial void OnTimeEnteredChanged();
    partial void OnReconciledChanging(bool value);
    partial void OnReconciledChanged();
    #endregion
		
		public Document()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeID", DbType="Int NOT NULL")]
		public int DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentDocumentID", DbType="Int NOT NULL")]
		public int ParentDocumentID
		{
			get
			{
				return this._ParentDocumentID;
			}
			set
			{
				if ((this._ParentDocumentID != value))
				{
					this.OnParentDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentDocumentID = value;
					this.SendPropertyChanged("ParentDocumentID");
					this.OnParentDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTime", DbType="DateTime NOT NULL")]
		public System.DateTime DocumentTime
		{
			get
			{
				return this._DocumentTime;
			}
			set
			{
				if ((this._DocumentTime != value))
				{
					this.OnDocumentTimeChanging(value);
					this.SendPropertyChanging();
					this._DocumentTime = value;
					this.SendPropertyChanged("DocumentTime");
					this.OnDocumentTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodID", DbType="Int NOT NULL")]
		public int PaymentMethodID
		{
			get
			{
				return this._PaymentMethodID;
			}
			set
			{
				if ((this._PaymentMethodID != value))
				{
					this.OnPaymentMethodIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodID = value;
					this.SendPropertyChanged("PaymentMethodID");
					this.OnPaymentMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentReference", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DocumentReference
		{
			get
			{
				return this._DocumentReference;
			}
			set
			{
				if ((this._DocumentReference != value))
				{
					this.OnDocumentReferenceChanging(value);
					this.SendPropertyChanging();
					this._DocumentReference = value;
					this.SendPropertyChanged("DocumentReference");
					this.OnDocumentReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentPath", DbType="VarChar(250)")]
		public string DocumentPath
		{
			get
			{
				return this._DocumentPath;
			}
			set
			{
				if ((this._DocumentPath != value))
				{
					this.OnDocumentPathChanging(value);
					this.SendPropertyChanging();
					this._DocumentPath = value;
					this.SendPropertyChanged("DocumentPath");
					this.OnDocumentPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EnteredBy
		{
			get
			{
				return this._EnteredBy;
			}
			set
			{
				if ((this._EnteredBy != value))
				{
					this.OnEnteredByChanging(value);
					this.SendPropertyChanging();
					this._EnteredBy = value;
					this.SendPropertyChanged("EnteredBy");
					this.OnEnteredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeEntered", DbType="DateTime NOT NULL")]
		public System.DateTime TimeEntered
		{
			get
			{
				return this._TimeEntered;
			}
			set
			{
				if ((this._TimeEntered != value))
				{
					this.OnTimeEnteredChanging(value);
					this.SendPropertyChanging();
					this._TimeEntered = value;
					this.SendPropertyChanged("TimeEntered");
					this.OnTimeEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reconciled", DbType="Bit NOT NULL")]
		public bool Reconciled
		{
			get
			{
				return this._Reconciled;
			}
			set
			{
				if ((this._Reconciled != value))
				{
					this.OnReconciledChanging(value);
					this.SendPropertyChanging();
					this._Reconciled = value;
					this.SendPropertyChanged("Reconciled");
					this.OnReconciledChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTable")]
	public partial class AccountTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AcctID;
		
		private int _AcctTypeID;
		
		private string _AcctName;
		
		private string _AcctNumber;
		
		private bool _Removable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcctIDChanging(int value);
    partial void OnAcctIDChanged();
    partial void OnAcctTypeIDChanging(int value);
    partial void OnAcctTypeIDChanged();
    partial void OnAcctNameChanging(string value);
    partial void OnAcctNameChanged();
    partial void OnAcctNumberChanging(string value);
    partial void OnAcctNumberChanged();
    partial void OnRemovableChanging(bool value);
    partial void OnRemovableChanged();
    #endregion
		
		public AccountTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AcctID
		{
			get
			{
				return this._AcctID;
			}
			set
			{
				if ((this._AcctID != value))
				{
					this.OnAcctIDChanging(value);
					this.SendPropertyChanging();
					this._AcctID = value;
					this.SendPropertyChanged("AcctID");
					this.OnAcctIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctTypeID", DbType="Int NOT NULL")]
		public int AcctTypeID
		{
			get
			{
				return this._AcctTypeID;
			}
			set
			{
				if ((this._AcctTypeID != value))
				{
					this.OnAcctTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AcctTypeID = value;
					this.SendPropertyChanged("AcctTypeID");
					this.OnAcctTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string AcctName
		{
			get
			{
				return this._AcctName;
			}
			set
			{
				if ((this._AcctName != value))
				{
					this.OnAcctNameChanging(value);
					this.SendPropertyChanging();
					this._AcctName = value;
					this.SendPropertyChanged("AcctName");
					this.OnAcctNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctNumber", DbType="VarChar(100)")]
		public string AcctNumber
		{
			get
			{
				return this._AcctNumber;
			}
			set
			{
				if ((this._AcctNumber != value))
				{
					this.OnAcctNumberChanging(value);
					this.SendPropertyChanging();
					this._AcctNumber = value;
					this.SendPropertyChanged("AcctNumber");
					this.OnAcctNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Removable", DbType="Bit NOT NULL")]
		public bool Removable
		{
			get
			{
				return this._Removable;
			}
			set
			{
				if ((this._Removable != value))
				{
					this.OnRemovableChanging(value);
					this.SendPropertyChanging();
					this._Removable = value;
					this.SendPropertyChanged("Removable");
					this.OnRemovableChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocID;
		
		private int _LocType;
		
		private string _LocLabel;
		
		private bool _Removable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocIDChanging(int value);
    partial void OnLocIDChanged();
    partial void OnLocTypeChanging(int value);
    partial void OnLocTypeChanged();
    partial void OnLocLabelChanging(string value);
    partial void OnLocLabelChanged();
    partial void OnRemovableChanging(bool value);
    partial void OnRemovableChanged();
    #endregion
		
		public Location()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocID
		{
			get
			{
				return this._LocID;
			}
			set
			{
				if ((this._LocID != value))
				{
					this.OnLocIDChanging(value);
					this.SendPropertyChanging();
					this._LocID = value;
					this.SendPropertyChanged("LocID");
					this.OnLocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocType", DbType="Int NOT NULL")]
		public int LocType
		{
			get
			{
				return this._LocType;
			}
			set
			{
				if ((this._LocType != value))
				{
					this.OnLocTypeChanging(value);
					this.SendPropertyChanging();
					this._LocType = value;
					this.SendPropertyChanged("LocType");
					this.OnLocTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocLabel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LocLabel
		{
			get
			{
				return this._LocLabel;
			}
			set
			{
				if ((this._LocLabel != value))
				{
					this.OnLocLabelChanging(value);
					this.SendPropertyChanging();
					this._LocLabel = value;
					this.SendPropertyChanged("LocLabel");
					this.OnLocLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Removable", DbType="Bit NOT NULL")]
		public bool Removable
		{
			get
			{
				return this._Removable;
			}
			set
			{
				if ((this._Removable != value))
				{
					this.OnRemovableChanging(value);
					this.SendPropertyChanging();
					this._Removable = value;
					this.SendPropertyChanged("Removable");
					this.OnRemovableChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DepositLine")]
	public partial class DepositLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepositLineID;
		
		private System.Nullable<int> _DepositDocID;
		
		private int _TransID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepositLineIDChanging(int value);
    partial void OnDepositLineIDChanged();
    partial void OnDepositDocIDChanging(System.Nullable<int> value);
    partial void OnDepositDocIDChanged();
    partial void OnTransIDChanging(int value);
    partial void OnTransIDChanged();
    #endregion
		
		public DepositLine()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepositLineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepositLineID
		{
			get
			{
				return this._DepositLineID;
			}
			set
			{
				if ((this._DepositLineID != value))
				{
					this.OnDepositLineIDChanging(value);
					this.SendPropertyChanging();
					this._DepositLineID = value;
					this.SendPropertyChanged("DepositLineID");
					this.OnDepositLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepositDocID", DbType="Int")]
		public System.Nullable<int> DepositDocID
		{
			get
			{
				return this._DepositDocID;
			}
			set
			{
				if ((this._DepositDocID != value))
				{
					this.OnDepositDocIDChanging(value);
					this.SendPropertyChanging();
					this._DepositDocID = value;
					this.SendPropertyChanged("DepositDocID");
					this.OnDepositDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransID", DbType="Int NOT NULL")]
		public int TransID
		{
			get
			{
				return this._TransID;
			}
			set
			{
				if ((this._TransID != value))
				{
					this.OnTransIDChanging(value);
					this.SendPropertyChanging();
					this._TransID = value;
					this.SendPropertyChanged("TransID");
					this.OnTransIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemConditionCode")]
	public partial class ItemConditionCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConditionCodeID;
		
		private string _Condition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConditionCodeIDChanging(int value);
    partial void OnConditionCodeIDChanged();
    partial void OnConditionChanging(string value);
    partial void OnConditionChanged();
    #endregion
		
		public ItemConditionCode()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionCodeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConditionCodeID
		{
			get
			{
				return this._ConditionCodeID;
			}
			set
			{
				if ((this._ConditionCodeID != value))
				{
					this.OnConditionCodeIDChanging(value);
					this.SendPropertyChanging();
					this._ConditionCodeID = value;
					this.SendPropertyChanged("ConditionCodeID");
					this.OnConditionCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Condition", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Condition
		{
			get
			{
				return this._Condition;
			}
			set
			{
				if ((this._Condition != value))
				{
					this.OnConditionChanging(value);
					this.SendPropertyChanging();
					this._Condition = value;
					this.SendPropertyChanged("Condition");
					this.OnConditionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransLineItemStatus")]
	public partial class TransLineItemStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransLineItemStatusID;
		
		private int _LineID;
		
		private int _LineItemStatusID;
		
		private string _SerialNumber;
		
		private int _LocationID;
		
		private int _ConditionID;
		
		private string _Note;
		
		private string _CreatedBy;
		
		private System.DateTime _CreateTime;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransLineItemStatusIDChanging(int value);
    partial void OnTransLineItemStatusIDChanged();
    partial void OnLineIDChanging(int value);
    partial void OnLineIDChanged();
    partial void OnLineItemStatusIDChanging(int value);
    partial void OnLineItemStatusIDChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnConditionIDChanging(int value);
    partial void OnConditionIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedTimeChanged();
    #endregion
		
		public TransLineItemStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransLineItemStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransLineItemStatusID
		{
			get
			{
				return this._TransLineItemStatusID;
			}
			set
			{
				if ((this._TransLineItemStatusID != value))
				{
					this.OnTransLineItemStatusIDChanging(value);
					this.SendPropertyChanging();
					this._TransLineItemStatusID = value;
					this.SendPropertyChanged("TransLineItemStatusID");
					this.OnTransLineItemStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="Int NOT NULL")]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineItemStatusID", DbType="Int NOT NULL")]
		public int LineItemStatusID
		{
			get
			{
				return this._LineItemStatusID;
			}
			set
			{
				if ((this._LineItemStatusID != value))
				{
					this.OnLineItemStatusIDChanging(value);
					this.SendPropertyChanging();
					this._LineItemStatusID = value;
					this.SendPropertyChanged("LineItemStatusID");
					this.OnLineItemStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionID", DbType="Int NOT NULL")]
		public int ConditionID
		{
			get
			{
				return this._ConditionID;
			}
			set
			{
				if ((this._ConditionID != value))
				{
					this.OnConditionIDChanging(value);
					this.SendPropertyChanging();
					this._ConditionID = value;
					this.SendPropertyChanged("ConditionID");
					this.OnConditionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="VarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedTime
		{
			get
			{
				return this._ModifiedTime;
			}
			set
			{
				if ((this._ModifiedTime != value))
				{
					this.OnModifiedTimeChanging(value);
					this.SendPropertyChanging();
					this._ModifiedTime = value;
					this.SendPropertyChanged("ModifiedTime");
					this.OnModifiedTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private string _ItemName;
		
		private int _ItemTypeID;
		
		private System.Nullable<int> _ItemManufacturerID;
		
		private string _UPC;
		
		private System.Data.Linq.Binary _ManufacturerPN;
		
		private string _ItemDescription;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<bool> _ItemNew;
		
		private System.Nullable<bool> _ItemTested;
		
		private System.Nullable<int> _LocID;
		
		private System.Nullable<int> _OwnerID;
		
		private System.Nullable<decimal> _ItemCost;
		
		private System.Nullable<decimal> _ItemPrice;
		
		private System.Nullable<decimal> _ItemApprasial;
		
		private bool _Serialized;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnItemTypeIDChanging(int value);
    partial void OnItemTypeIDChanged();
    partial void OnItemManufacturerIDChanging(System.Nullable<int> value);
    partial void OnItemManufacturerIDChanged();
    partial void OnUPCChanging(string value);
    partial void OnUPCChanged();
    partial void OnManufacturerPNChanging(System.Data.Linq.Binary value);
    partial void OnManufacturerPNChanged();
    partial void OnItemDescriptionChanging(string value);
    partial void OnItemDescriptionChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnItemNewChanging(System.Nullable<bool> value);
    partial void OnItemNewChanged();
    partial void OnItemTestedChanging(System.Nullable<bool> value);
    partial void OnItemTestedChanged();
    partial void OnLocIDChanging(System.Nullable<int> value);
    partial void OnLocIDChanged();
    partial void OnOwnerIDChanging(System.Nullable<int> value);
    partial void OnOwnerIDChanged();
    partial void OnItemCostChanging(System.Nullable<decimal> value);
    partial void OnItemCostChanged();
    partial void OnItemPriceChanging(System.Nullable<decimal> value);
    partial void OnItemPriceChanged();
    partial void OnItemApprasialChanging(System.Nullable<decimal> value);
    partial void OnItemApprasialChanged();
    partial void OnSerializedChanging(bool value);
    partial void OnSerializedChanged();
    #endregion
		
		public Item()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTypeID", DbType="Int NOT NULL")]
		public int ItemTypeID
		{
			get
			{
				return this._ItemTypeID;
			}
			set
			{
				if ((this._ItemTypeID != value))
				{
					this.OnItemTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ItemTypeID = value;
					this.SendPropertyChanged("ItemTypeID");
					this.OnItemTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemManufacturerID", DbType="Int")]
		public System.Nullable<int> ItemManufacturerID
		{
			get
			{
				return this._ItemManufacturerID;
			}
			set
			{
				if ((this._ItemManufacturerID != value))
				{
					this.OnItemManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ItemManufacturerID = value;
					this.SendPropertyChanged("ItemManufacturerID");
					this.OnItemManufacturerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UPC", DbType="NVarChar(12)")]
		public string UPC
		{
			get
			{
				return this._UPC;
			}
			set
			{
				if ((this._UPC != value))
				{
					this.OnUPCChanging(value);
					this.SendPropertyChanging();
					this._UPC = value;
					this.SendPropertyChanged("UPC");
					this.OnUPCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerPN", DbType="VarBinary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ManufacturerPN
		{
			get
			{
				return this._ManufacturerPN;
			}
			set
			{
				if ((this._ManufacturerPN != value))
				{
					this.OnManufacturerPNChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerPN = value;
					this.SendPropertyChanged("ManufacturerPN");
					this.OnManufacturerPNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDescription", DbType="VarChar(256)")]
		public string ItemDescription
		{
			get
			{
				return this._ItemDescription;
			}
			set
			{
				if ((this._ItemDescription != value))
				{
					this.OnItemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ItemDescription = value;
					this.SendPropertyChanged("ItemDescription");
					this.OnItemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNew", DbType="Bit")]
		public System.Nullable<bool> ItemNew
		{
			get
			{
				return this._ItemNew;
			}
			set
			{
				if ((this._ItemNew != value))
				{
					this.OnItemNewChanging(value);
					this.SendPropertyChanging();
					this._ItemNew = value;
					this.SendPropertyChanged("ItemNew");
					this.OnItemNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTested", DbType="Bit")]
		public System.Nullable<bool> ItemTested
		{
			get
			{
				return this._ItemTested;
			}
			set
			{
				if ((this._ItemTested != value))
				{
					this.OnItemTestedChanging(value);
					this.SendPropertyChanging();
					this._ItemTested = value;
					this.SendPropertyChanged("ItemTested");
					this.OnItemTestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocID", DbType="Int")]
		public System.Nullable<int> LocID
		{
			get
			{
				return this._LocID;
			}
			set
			{
				if ((this._LocID != value))
				{
					this.OnLocIDChanging(value);
					this.SendPropertyChanging();
					this._LocID = value;
					this.SendPropertyChanged("LocID");
					this.OnLocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCost", DbType="Money")]
		public System.Nullable<decimal> ItemCost
		{
			get
			{
				return this._ItemCost;
			}
			set
			{
				if ((this._ItemCost != value))
				{
					this.OnItemCostChanging(value);
					this.SendPropertyChanging();
					this._ItemCost = value;
					this.SendPropertyChanged("ItemCost");
					this.OnItemCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemPrice", DbType="Money")]
		public System.Nullable<decimal> ItemPrice
		{
			get
			{
				return this._ItemPrice;
			}
			set
			{
				if ((this._ItemPrice != value))
				{
					this.OnItemPriceChanging(value);
					this.SendPropertyChanging();
					this._ItemPrice = value;
					this.SendPropertyChanged("ItemPrice");
					this.OnItemPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemApprasial", DbType="Money")]
		public System.Nullable<decimal> ItemApprasial
		{
			get
			{
				return this._ItemApprasial;
			}
			set
			{
				if ((this._ItemApprasial != value))
				{
					this.OnItemApprasialChanging(value);
					this.SendPropertyChanging();
					this._ItemApprasial = value;
					this.SendPropertyChanged("ItemApprasial");
					this.OnItemApprasialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Serialized", DbType="Bit NOT NULL")]
		public bool Serialized
		{
			get
			{
				return this._Serialized;
			}
			set
			{
				if ((this._Serialized != value))
				{
					this.OnSerializedChanging(value);
					this.SendPropertyChanging();
					this._Serialized = value;
					this.SendPropertyChanged("Serialized");
					this.OnSerializedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesDoc")]
	public partial class SalesDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalesDocID;
		
		private int _DocID;
		
		private int _StatusID;
		
		private System.Nullable<System.DateTime> _StatusChangeTime;
		
		private string _StatusChangedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalesDocIDChanging(int value);
    partial void OnSalesDocIDChanged();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusChangeTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStatusChangeTimeChanged();
    partial void OnStatusChangedByChanging(string value);
    partial void OnStatusChangedByChanged();
    #endregion
		
		public SalesDoc()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesDocID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SalesDocID
		{
			get
			{
				return this._SalesDocID;
			}
			set
			{
				if ((this._SalesDocID != value))
				{
					this.OnSalesDocIDChanging(value);
					this.SendPropertyChanging();
					this._SalesDocID = value;
					this.SendPropertyChanged("SalesDocID");
					this.OnSalesDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int NOT NULL")]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusChangeTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StatusChangeTime
		{
			get
			{
				return this._StatusChangeTime;
			}
			set
			{
				if ((this._StatusChangeTime != value))
				{
					this.OnStatusChangeTimeChanging(value);
					this.SendPropertyChanging();
					this._StatusChangeTime = value;
					this.SendPropertyChanged("StatusChangeTime");
					this.OnStatusChangeTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusChangedBy", DbType="VarChar(50)")]
		public string StatusChangedBy
		{
			get
			{
				return this._StatusChangedBy;
			}
			set
			{
				if ((this._StatusChangedBy != value))
				{
					this.OnStatusChangedByChanging(value);
					this.SendPropertyChanging();
					this._StatusChangedBy = value;
					this.SendPropertyChanged("StatusChangedBy");
					this.OnStatusChangedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesDocStatus")]
	public partial class SalesDocStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalesStatusID;
		
		private string _SalesStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalesStatusIDChanging(int value);
    partial void OnSalesStatusIDChanged();
    partial void OnSalesStatusChanging(string value);
    partial void OnSalesStatusChanged();
    #endregion
		
		public SalesDocStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SalesStatusID
		{
			get
			{
				return this._SalesStatusID;
			}
			set
			{
				if ((this._SalesStatusID != value))
				{
					this.OnSalesStatusIDChanging(value);
					this.SendPropertyChanging();
					this._SalesStatusID = value;
					this.SendPropertyChanged("SalesStatusID");
					this.OnSalesStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesStatus", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SalesStatus
		{
			get
			{
				return this._SalesStatus;
			}
			set
			{
				if ((this._SalesStatus != value))
				{
					this.OnSalesStatusChanging(value);
					this.SendPropertyChanging();
					this._SalesStatus = value;
					this.SendPropertyChanged("SalesStatus");
					this.OnSalesStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaxRate")]
	public partial class TaxRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaxLocID;
		
		private string _Code;
		
		private string _LocationName;
		
		private decimal _Rate;
		
		private int _PayableAcctID;
		
		private int _ExpenseAcctID;
		
		private string _CreatedBy;
		
		private System.DateTime _CreateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaxLocIDChanging(int value);
    partial void OnTaxLocIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnRateChanging(decimal value);
    partial void OnRateChanged();
    partial void OnPayableAcctIDChanging(int value);
    partial void OnPayableAcctIDChanged();
    partial void OnExpenseAcctIDChanging(int value);
    partial void OnExpenseAcctIDChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public TaxRate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxLocID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaxLocID
		{
			get
			{
				return this._TaxLocID;
			}
			set
			{
				if ((this._TaxLocID != value))
				{
					this.OnTaxLocIDChanging(value);
					this.SendPropertyChanging();
					this._TaxLocID = value;
					this.SendPropertyChanged("TaxLocID");
					this.OnTaxLocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(10)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(18,4) NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayableAcctID", DbType="Int NOT NULL")]
		public int PayableAcctID
		{
			get
			{
				return this._PayableAcctID;
			}
			set
			{
				if ((this._PayableAcctID != value))
				{
					this.OnPayableAcctIDChanging(value);
					this.SendPropertyChanging();
					this._PayableAcctID = value;
					this.SendPropertyChanged("PayableAcctID");
					this.OnPayableAcctIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenseAcctID", DbType="Int NOT NULL")]
		public int ExpenseAcctID
		{
			get
			{
				return this._ExpenseAcctID;
			}
			set
			{
				if ((this._ExpenseAcctID != value))
				{
					this.OnExpenseAcctIDChanging(value);
					this.SendPropertyChanging();
					this._ExpenseAcctID = value;
					this.SendPropertyChanged("ExpenseAcctID");
					this.OnExpenseAcctIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemType")]
	public partial class ItemType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemTypeID;
		
		private string _Name;
		
		private System.Nullable<bool> _Removable;
		
		private int _InvDesignation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemTypeIDChanging(int value);
    partial void OnItemTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRemovableChanging(System.Nullable<bool> value);
    partial void OnRemovableChanged();
    partial void OnInvDesignationChanging(int value);
    partial void OnInvDesignationChanged();
    #endregion
		
		public ItemType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemTypeID
		{
			get
			{
				return this._ItemTypeID;
			}
			set
			{
				if ((this._ItemTypeID != value))
				{
					this.OnItemTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ItemTypeID = value;
					this.SendPropertyChanged("ItemTypeID");
					this.OnItemTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Removable", DbType="Bit")]
		public System.Nullable<bool> Removable
		{
			get
			{
				return this._Removable;
			}
			set
			{
				if ((this._Removable != value))
				{
					this.OnRemovableChanging(value);
					this.SendPropertyChanging();
					this._Removable = value;
					this.SendPropertyChanged("Removable");
					this.OnRemovableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvDesignation", DbType="Int NOT NULL")]
		public int InvDesignation
		{
			get
			{
				return this._InvDesignation;
			}
			set
			{
				if ((this._InvDesignation != value))
				{
					this.OnInvDesignationChanging(value);
					this.SendPropertyChanging();
					this._InvDesignation = value;
					this.SendPropertyChanged("InvDesignation");
					this.OnInvDesignationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationType")]
	public partial class LocationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocTypeID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocTypeIDChanging(int value);
    partial void OnLocTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public LocationType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocTypeID
		{
			get
			{
				return this._LocTypeID;
			}
			set
			{
				if ((this._LocTypeID != value))
				{
					this.OnLocTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LocTypeID = value;
					this.SendPropertyChanged("LocTypeID");
					this.OnLocTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemTypeRevExp")]
	public partial class ItemTypeRevExp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemTypeRevExpID;
		
		private int _ItemTypeID;
		
		private int _RevAcctID;
		
		private int _ExpAcctID;
		
		private int _InvAcctID;
		
		private int _CoGAcctID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemTypeRevExpIDChanging(int value);
    partial void OnItemTypeRevExpIDChanged();
    partial void OnItemTypeIDChanging(int value);
    partial void OnItemTypeIDChanged();
    partial void OnRevAcctIDChanging(int value);
    partial void OnRevAcctIDChanged();
    partial void OnExpAcctIDChanging(int value);
    partial void OnExpAcctIDChanged();
    partial void OnInvAcctIDChanging(int value);
    partial void OnInvAcctIDChanged();
    partial void OnCoGAcctIDChanging(int value);
    partial void OnCoGAcctIDChanged();
    #endregion
		
		public ItemTypeRevExp()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTypeRevExpID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemTypeRevExpID
		{
			get
			{
				return this._ItemTypeRevExpID;
			}
			set
			{
				if ((this._ItemTypeRevExpID != value))
				{
					this.OnItemTypeRevExpIDChanging(value);
					this.SendPropertyChanging();
					this._ItemTypeRevExpID = value;
					this.SendPropertyChanged("ItemTypeRevExpID");
					this.OnItemTypeRevExpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTypeID", DbType="Int NOT NULL")]
		public int ItemTypeID
		{
			get
			{
				return this._ItemTypeID;
			}
			set
			{
				if ((this._ItemTypeID != value))
				{
					this.OnItemTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ItemTypeID = value;
					this.SendPropertyChanged("ItemTypeID");
					this.OnItemTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevAcctID", DbType="Int NOT NULL")]
		public int RevAcctID
		{
			get
			{
				return this._RevAcctID;
			}
			set
			{
				if ((this._RevAcctID != value))
				{
					this.OnRevAcctIDChanging(value);
					this.SendPropertyChanging();
					this._RevAcctID = value;
					this.SendPropertyChanged("RevAcctID");
					this.OnRevAcctIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpAcctID", DbType="Int NOT NULL")]
		public int ExpAcctID
		{
			get
			{
				return this._ExpAcctID;
			}
			set
			{
				if ((this._ExpAcctID != value))
				{
					this.OnExpAcctIDChanging(value);
					this.SendPropertyChanging();
					this._ExpAcctID = value;
					this.SendPropertyChanged("ExpAcctID");
					this.OnExpAcctIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvAcctID", DbType="Int NOT NULL")]
		public int InvAcctID
		{
			get
			{
				return this._InvAcctID;
			}
			set
			{
				if ((this._InvAcctID != value))
				{
					this.OnInvAcctIDChanging(value);
					this.SendPropertyChanging();
					this._InvAcctID = value;
					this.SendPropertyChanged("InvAcctID");
					this.OnInvAcctIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoGAcctID", DbType="Int NOT NULL")]
		public int CoGAcctID
		{
			get
			{
				return this._CoGAcctID;
			}
			set
			{
				if ((this._CoGAcctID != value))
				{
					this.OnCoGAcctIDChanging(value);
					this.SendPropertyChanging();
					this._CoGAcctID = value;
					this.SendPropertyChanged("CoGAcctID");
					this.OnCoGAcctIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserActSumView")]
	public partial class UserActSumView : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActSumViewID;
		
		private string _UserName;
		
		private int _AcctTypeID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActSumViewIDChanging(int value);
    partial void OnActSumViewIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnAcctTypeIDChanging(int value);
    partial void OnAcctTypeIDChanged();
    #endregion
		
		public UserActSumView()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActSumViewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActSumViewID
		{
			get
			{
				return this._ActSumViewID;
			}
			set
			{
				if ((this._ActSumViewID != value))
				{
					this.OnActSumViewIDChanging(value);
					this.SendPropertyChanging();
					this._ActSumViewID = value;
					this.SendPropertyChanged("ActSumViewID");
					this.OnActSumViewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctTypeID", DbType="Int NOT NULL")]
		public int AcctTypeID
		{
			get
			{
				return this._AcctTypeID;
			}
			set
			{
				if ((this._AcctTypeID != value))
				{
					this.OnAcctTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AcctTypeID = value;
					this.SendPropertyChanged("AcctTypeID");
					this.OnAcctTypeIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VendItem")]
	public partial class VendItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VendItemID;
		
		private int _ItemID;
		
		private int _VendID;
		
		private System.Nullable<decimal> _LastCost;
		
		private string _VendPN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVendItemIDChanging(int value);
    partial void OnVendItemIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnVendIDChanging(int value);
    partial void OnVendIDChanged();
    partial void OnLastCostChanging(System.Nullable<decimal> value);
    partial void OnLastCostChanged();
    partial void OnVendPNChanging(string value);
    partial void OnVendPNChanged();
    #endregion
		
		public VendItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VendItemID
		{
			get
			{
				return this._VendItemID;
			}
			set
			{
				if ((this._VendItemID != value))
				{
					this.OnVendItemIDChanging(value);
					this.SendPropertyChanging();
					this._VendItemID = value;
					this.SendPropertyChanged("VendItemID");
					this.OnVendItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendID", DbType="Int NOT NULL")]
		public int VendID
		{
			get
			{
				return this._VendID;
			}
			set
			{
				if ((this._VendID != value))
				{
					this.OnVendIDChanging(value);
					this.SendPropertyChanging();
					this._VendID = value;
					this.SendPropertyChanged("VendID");
					this.OnVendIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastCost", DbType="Money")]
		public System.Nullable<decimal> LastCost
		{
			get
			{
				return this._LastCost;
			}
			set
			{
				if ((this._LastCost != value))
				{
					this.OnLastCostChanging(value);
					this.SendPropertyChanging();
					this._LastCost = value;
					this.SendPropertyChanged("LastCost");
					this.OnLastCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendPN", DbType="VarChar(50)")]
		public string VendPN
		{
			get
			{
				return this._VendPN;
			}
			set
			{
				if ((this._VendPN != value))
				{
					this.OnVendPNChanging(value);
					this.SendPropertyChanging();
					this._VendPN = value;
					this.SendPropertyChanged("VendPN");
					this.OnVendPNChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReceivableDoc")]
	public partial class ReceivableDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecDocID;
		
		private int _AcctID;
		
		private int _DocID;
		
		private bool _Paid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecDocIDChanging(int value);
    partial void OnRecDocIDChanged();
    partial void OnAcctIDChanging(int value);
    partial void OnAcctIDChanged();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnPaidChanging(bool value);
    partial void OnPaidChanged();
    #endregion
		
		public ReceivableDoc()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecDocID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecDocID
		{
			get
			{
				return this._RecDocID;
			}
			set
			{
				if ((this._RecDocID != value))
				{
					this.OnRecDocIDChanging(value);
					this.SendPropertyChanging();
					this._RecDocID = value;
					this.SendPropertyChanged("RecDocID");
					this.OnRecDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctID", DbType="Int NOT NULL")]
		public int AcctID
		{
			get
			{
				return this._AcctID;
			}
			set
			{
				if ((this._AcctID != value))
				{
					this.OnAcctIDChanging(value);
					this.SendPropertyChanging();
					this._AcctID = value;
					this.SendPropertyChanged("AcctID");
					this.OnAcctIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int NOT NULL")]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="Bit NOT NULL")]
		public bool Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactTypeTable")]
	public partial class ContactTypeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactTypeID;
		
		private string _ContactType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactTypeIDChanging(int value);
    partial void OnContactTypeIDChanged();
    partial void OnContactTypeChanging(string value);
    partial void OnContactTypeChanged();
    #endregion
		
		public ContactTypeTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactTypeID
		{
			get
			{
				return this._ContactTypeID;
			}
			set
			{
				if ((this._ContactTypeID != value))
				{
					this.OnContactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContactTypeID = value;
					this.SendPropertyChanged("ContactTypeID");
					this.OnContactTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactType
		{
			get
			{
				return this._ContactType;
			}
			set
			{
				if ((this._ContactType != value))
				{
					this.OnContactTypeChanging(value);
					this.SendPropertyChanging();
					this._ContactType = value;
					this.SendPropertyChanged("ContactType");
					this.OnContactTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contacts")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactID;
		
		private string _LastName;
		
		private string _FirstName;
		
		private int _ContactTypeID;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _Country;
		
		private string _PostalCode;
		
		private string _Phone;
		
		private string _Email;
		
		private int _AcctID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnContactTypeIDChanging(int value);
    partial void OnContactTypeIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAcctIDChanging(int value);
    partial void OnAcctIDChanged();
    #endregion
		
		public Contact()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTypeID", DbType="Int NOT NULL")]
		public int ContactTypeID
		{
			get
			{
				return this._ContactTypeID;
			}
			set
			{
				if ((this._ContactTypeID != value))
				{
					this.OnContactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContactTypeID = value;
					this.SendPropertyChanged("ContactTypeID");
					this.OnContactTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(20)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(30)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctID", DbType="Int NOT NULL")]
		public int AcctID
		{
			get
			{
				return this._AcctID;
			}
			set
			{
				if ((this._AcctID != value))
				{
					this.OnAcctIDChanging(value);
					this.SendPropertyChanging();
					this._AcctID = value;
					this.SendPropertyChanged("AcctID");
					this.OnAcctIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemSN")]
	public partial class ItemSN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SNID;
		
		private int _ItemID;
		
		private string _SN;
		
		private int _AcctID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSNIDChanging(int value);
    partial void OnSNIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnSNChanging(string value);
    partial void OnSNChanged();
    partial void OnAcctIDChanging(int value);
    partial void OnAcctIDChanged();
    #endregion
		
		public ItemSN()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SNID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SNID
		{
			get
			{
				return this._SNID;
			}
			set
			{
				if ((this._SNID != value))
				{
					this.OnSNIDChanging(value);
					this.SendPropertyChanging();
					this._SNID = value;
					this.SendPropertyChanged("SNID");
					this.OnSNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SN", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SN
		{
			get
			{
				return this._SN;
			}
			set
			{
				if ((this._SN != value))
				{
					this.OnSNChanging(value);
					this.SendPropertyChanging();
					this._SN = value;
					this.SendPropertyChanged("SN");
					this.OnSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctID", DbType="Int NOT NULL")]
		public int AcctID
		{
			get
			{
				return this._AcctID;
			}
			set
			{
				if ((this._AcctID != value))
				{
					this.OnAcctIDChanging(value);
					this.SendPropertyChanging();
					this._AcctID = value;
					this.SendPropertyChanged("AcctID");
					this.OnAcctIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceCreditType")]
	public partial class ServiceCreditType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SCTID;
		
		private int _ItemID;
		
		private string _ServiceType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSCTIDChanging(int value);
    partial void OnSCTIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnServiceTypeChanging(string value);
    partial void OnServiceTypeChanged();
    #endregion
		
		public ServiceCreditType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SCTID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SCTID
		{
			get
			{
				return this._SCTID;
			}
			set
			{
				if ((this._SCTID != value))
				{
					this.OnSCTIDChanging(value);
					this.SendPropertyChanging();
					this._SCTID = value;
					this.SendPropertyChanged("SCTID");
					this.OnSCTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ServiceType
		{
			get
			{
				return this._ServiceType;
			}
			set
			{
				if ((this._ServiceType != value))
				{
					this.OnServiceTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceType = value;
					this.SendPropertyChanged("ServiceType");
					this.OnServiceTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceCreditValue")]
	public partial class ServiceCreditValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SCVID;
		
		private int _SCTID;
		
		private int _ItemID;
		
		private decimal _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSCVIDChanging(int value);
    partial void OnSCVIDChanged();
    partial void OnSCTIDChanging(int value);
    partial void OnSCTIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    #endregion
		
		public ServiceCreditValue()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SCVID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SCVID
		{
			get
			{
				return this._SCVID;
			}
			set
			{
				if ((this._SCVID != value))
				{
					this.OnSCVIDChanging(value);
					this.SendPropertyChanging();
					this._SCVID = value;
					this.SendPropertyChanged("SCVID");
					this.OnSCVIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SCTID", DbType="Int NOT NULL")]
		public int SCTID
		{
			get
			{
				return this._SCTID;
			}
			set
			{
				if ((this._SCTID != value))
				{
					this.OnSCTIDChanging(value);
					this.SendPropertyChanging();
					this._SCTID = value;
					this.SendPropertyChanged("SCTID");
					this.OnSCTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Money NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceCredits")]
	public partial class ServiceCredit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SCID;
		
		private int _AcctID;
		
		private int _ServiceType;
		
		private System.Nullable<int> _JobLineID;
		
		private int _DocID;
		
		private System.DateTime _ChangeDate;
		
		private decimal _Amount;
		
		private string _EnteredBy;
		
		private System.DateTime _EntryDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSCIDChanging(int value);
    partial void OnSCIDChanged();
    partial void OnAcctIDChanging(int value);
    partial void OnAcctIDChanged();
    partial void OnServiceTypeChanging(int value);
    partial void OnServiceTypeChanged();
    partial void OnJobLineIDChanging(System.Nullable<int> value);
    partial void OnJobLineIDChanged();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnChangeDateChanging(System.DateTime value);
    partial void OnChangeDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnEnteredByChanging(string value);
    partial void OnEnteredByChanged();
    partial void OnEntryDateChanging(System.DateTime value);
    partial void OnEntryDateChanged();
    #endregion
		
		public ServiceCredit()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SCID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SCID
		{
			get
			{
				return this._SCID;
			}
			set
			{
				if ((this._SCID != value))
				{
					this.OnSCIDChanging(value);
					this.SendPropertyChanging();
					this._SCID = value;
					this.SendPropertyChanged("SCID");
					this.OnSCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcctID", DbType="Int NOT NULL")]
		public int AcctID
		{
			get
			{
				return this._AcctID;
			}
			set
			{
				if ((this._AcctID != value))
				{
					this.OnAcctIDChanging(value);
					this.SendPropertyChanging();
					this._AcctID = value;
					this.SendPropertyChanged("AcctID");
					this.OnAcctIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceType", DbType="Int NOT NULL")]
		public int ServiceType
		{
			get
			{
				return this._ServiceType;
			}
			set
			{
				if ((this._ServiceType != value))
				{
					this.OnServiceTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceType = value;
					this.SendPropertyChanged("ServiceType");
					this.OnServiceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobLineID", DbType="Int")]
		public System.Nullable<int> JobLineID
		{
			get
			{
				return this._JobLineID;
			}
			set
			{
				if ((this._JobLineID != value))
				{
					this.OnJobLineIDChanging(value);
					this.SendPropertyChanging();
					this._JobLineID = value;
					this.SendPropertyChanged("JobLineID");
					this.OnJobLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int NOT NULL")]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EnteredBy
		{
			get
			{
				return this._EnteredBy;
			}
			set
			{
				if ((this._EnteredBy != value))
				{
					this.OnEnteredByChanging(value);
					this.SendPropertyChanging();
					this._EnteredBy = value;
					this.SendPropertyChanged("EnteredBy");
					this.OnEnteredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DateTime NOT NULL")]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobLines")]
	public partial class JobLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobLineID;
		
		private int _JobID;
		
		private string _Description;
		
		private System.DateTime _TimeIn;
		
		private System.DateTime _TimeOut;
		
		private decimal _TotalTime;
		
		private decimal _HourRate;
		
		private int _EmployeeID;
		
		private int _ServiceItemID;
		
		private string _EnteredBy;
		
		private System.DateTime _EnterTime;
		
		private bool _InDocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobLineIDChanging(int value);
    partial void OnJobLineIDChanged();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeInChanging(System.DateTime value);
    partial void OnTimeInChanged();
    partial void OnTimeOutChanging(System.DateTime value);
    partial void OnTimeOutChanged();
    partial void OnTotalTimeChanging(decimal value);
    partial void OnTotalTimeChanged();
    partial void OnHourRateChanging(decimal value);
    partial void OnHourRateChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnServiceItemIDChanging(int value);
    partial void OnServiceItemIDChanged();
    partial void OnEnteredByChanging(string value);
    partial void OnEnteredByChanged();
    partial void OnEnterTimeChanging(System.DateTime value);
    partial void OnEnterTimeChanged();
    partial void OnInDocumentChanging(bool value);
    partial void OnInDocumentChanged();
    #endregion
		
		public JobLine()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobLineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobLineID
		{
			get
			{
				return this._JobLineID;
			}
			set
			{
				if ((this._JobLineID != value))
				{
					this.OnJobLineIDChanging(value);
					this.SendPropertyChanging();
					this._JobLineID = value;
					this.SendPropertyChanged("JobLineID");
					this.OnJobLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeIn", DbType="DateTime NOT NULL")]
		public System.DateTime TimeIn
		{
			get
			{
				return this._TimeIn;
			}
			set
			{
				if ((this._TimeIn != value))
				{
					this.OnTimeInChanging(value);
					this.SendPropertyChanging();
					this._TimeIn = value;
					this.SendPropertyChanged("TimeIn");
					this.OnTimeInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeOut", DbType="DateTime NOT NULL")]
		public System.DateTime TimeOut
		{
			get
			{
				return this._TimeOut;
			}
			set
			{
				if ((this._TimeOut != value))
				{
					this.OnTimeOutChanging(value);
					this.SendPropertyChanging();
					this._TimeOut = value;
					this.SendPropertyChanged("TimeOut");
					this.OnTimeOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTime", DbType="Decimal(18,2) NOT NULL")]
		public decimal TotalTime
		{
			get
			{
				return this._TotalTime;
			}
			set
			{
				if ((this._TotalTime != value))
				{
					this.OnTotalTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalTime = value;
					this.SendPropertyChanged("TotalTime");
					this.OnTotalTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourRate", DbType="Money NOT NULL")]
		public decimal HourRate
		{
			get
			{
				return this._HourRate;
			}
			set
			{
				if ((this._HourRate != value))
				{
					this.OnHourRateChanging(value);
					this.SendPropertyChanging();
					this._HourRate = value;
					this.SendPropertyChanged("HourRate");
					this.OnHourRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceItemID", DbType="Int NOT NULL")]
		public int ServiceItemID
		{
			get
			{
				return this._ServiceItemID;
			}
			set
			{
				if ((this._ServiceItemID != value))
				{
					this.OnServiceItemIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceItemID = value;
					this.SendPropertyChanged("ServiceItemID");
					this.OnServiceItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EnteredBy
		{
			get
			{
				return this._EnteredBy;
			}
			set
			{
				if ((this._EnteredBy != value))
				{
					this.OnEnteredByChanging(value);
					this.SendPropertyChanging();
					this._EnteredBy = value;
					this.SendPropertyChanged("EnteredBy");
					this.OnEnteredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterTime", DbType="DateTime NOT NULL")]
		public System.DateTime EnterTime
		{
			get
			{
				return this._EnterTime;
			}
			set
			{
				if ((this._EnterTime != value))
				{
					this.OnEnterTimeChanging(value);
					this.SendPropertyChanging();
					this._EnterTime = value;
					this.SendPropertyChanged("EnterTime");
					this.OnEnterTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InDocument", DbType="Bit NOT NULL")]
		public bool InDocument
		{
			get
			{
				return this._InDocument;
			}
			set
			{
				if ((this._InDocument != value))
				{
					this.OnInDocumentChanging(value);
					this.SendPropertyChanging();
					this._InDocument = value;
					this.SendPropertyChanged("InDocument");
					this.OnInDocumentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Jobs")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JID;
		
		private int _CustID;
		
		private string _JobDescription;
		
		private int _OrderedBy;
		
		private System.DateTime _RequestDate;
		
		private System.DateTime _DueDate;
		
		private string _EnteredBy;
		
		private System.DateTime _EnterDate;
		
		private bool _Completed;
		
		private System.Nullable<System.DateTime> _CompleteDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJIDChanging(int value);
    partial void OnJIDChanged();
    partial void OnCustIDChanging(int value);
    partial void OnCustIDChanged();
    partial void OnJobDescriptionChanging(string value);
    partial void OnJobDescriptionChanged();
    partial void OnOrderedByChanging(int value);
    partial void OnOrderedByChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnEnteredByChanging(string value);
    partial void OnEnteredByChanged();
    partial void OnEnterDateChanging(System.DateTime value);
    partial void OnEnterDateChanged();
    partial void OnCompletedChanging(bool value);
    partial void OnCompletedChanged();
    partial void OnCompleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompleteDateChanged();
    #endregion
		
		public Job()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JID
		{
			get
			{
				return this._JID;
			}
			set
			{
				if ((this._JID != value))
				{
					this.OnJIDChanging(value);
					this.SendPropertyChanging();
					this._JID = value;
					this.SendPropertyChanged("JID");
					this.OnJIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustID", DbType="Int NOT NULL")]
		public int CustID
		{
			get
			{
				return this._CustID;
			}
			set
			{
				if ((this._CustID != value))
				{
					this.OnCustIDChanging(value);
					this.SendPropertyChanging();
					this._CustID = value;
					this.SendPropertyChanged("CustID");
					this.OnCustIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDescription", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string JobDescription
		{
			get
			{
				return this._JobDescription;
			}
			set
			{
				if ((this._JobDescription != value))
				{
					this.OnJobDescriptionChanging(value);
					this.SendPropertyChanging();
					this._JobDescription = value;
					this.SendPropertyChanged("JobDescription");
					this.OnJobDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderedBy", DbType="Int NOT NULL")]
		public int OrderedBy
		{
			get
			{
				return this._OrderedBy;
			}
			set
			{
				if ((this._OrderedBy != value))
				{
					this.OnOrderedByChanging(value);
					this.SendPropertyChanging();
					this._OrderedBy = value;
					this.SendPropertyChanged("OrderedBy");
					this.OnOrderedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EnteredBy
		{
			get
			{
				return this._EnteredBy;
			}
			set
			{
				if ((this._EnteredBy != value))
				{
					this.OnEnteredByChanging(value);
					this.SendPropertyChanging();
					this._EnteredBy = value;
					this.SendPropertyChanged("EnteredBy");
					this.OnEnteredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterDate", DbType="DateTime NOT NULL")]
		public System.DateTime EnterDate
		{
			get
			{
				return this._EnterDate;
			}
			set
			{
				if ((this._EnterDate != value))
				{
					this.OnEnterDateChanging(value);
					this.SendPropertyChanging();
					this._EnterDate = value;
					this.SendPropertyChanged("EnterDate");
					this.OnEnterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completed", DbType="Bit NOT NULL")]
		public bool Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompleteDate
		{
			get
			{
				return this._CompleteDate;
			}
			set
			{
				if ((this._CompleteDate != value))
				{
					this.OnCompleteDateChanging(value);
					this.SendPropertyChanging();
					this._CompleteDate = value;
					this.SendPropertyChanged("CompleteDate");
					this.OnCompleteDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransLineItems")]
	public partial class TransLineItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LineID;
		
		private int _DocumentID;
		
		private int _ItemID;
		
		private int _JobLineID;
		
		private decimal _Quantity;
		
		private decimal _Price;
		
		private string _ItemNote;
		
		private bool _TaxPaid;
		
		private bool _Allocated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLineIDChanging(int value);
    partial void OnLineIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnJobLineIDChanging(int value);
    partial void OnJobLineIDChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnItemNoteChanging(string value);
    partial void OnItemNoteChanged();
    partial void OnTaxPaidChanging(bool value);
    partial void OnTaxPaidChanged();
    partial void OnAllocatedChanging(bool value);
    partial void OnAllocatedChanged();
    #endregion
		
		public TransLineItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobLineID", DbType="Int NOT NULL")]
		public int JobLineID
		{
			get
			{
				return this._JobLineID;
			}
			set
			{
				if ((this._JobLineID != value))
				{
					this.OnJobLineIDChanging(value);
					this.SendPropertyChanging();
					this._JobLineID = value;
					this.SendPropertyChanged("JobLineID");
					this.OnJobLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,4) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNote", DbType="VarChar(50)")]
		public string ItemNote
		{
			get
			{
				return this._ItemNote;
			}
			set
			{
				if ((this._ItemNote != value))
				{
					this.OnItemNoteChanging(value);
					this.SendPropertyChanging();
					this._ItemNote = value;
					this.SendPropertyChanged("ItemNote");
					this.OnItemNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxPaid", DbType="Bit NOT NULL")]
		public bool TaxPaid
		{
			get
			{
				return this._TaxPaid;
			}
			set
			{
				if ((this._TaxPaid != value))
				{
					this.OnTaxPaidChanging(value);
					this.SendPropertyChanging();
					this._TaxPaid = value;
					this.SendPropertyChanged("TaxPaid");
					this.OnTaxPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allocated", DbType="Bit NOT NULL")]
		public bool Allocated
		{
			get
			{
				return this._Allocated;
			}
			set
			{
				if ((this._Allocated != value))
				{
					this.OnAllocatedChanging(value);
					this.SendPropertyChanging();
					this._Allocated = value;
					this.SendPropertyChanged("Allocated");
					this.OnAllocatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayMethod")]
	public partial class PayMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PayMethID;
		
		private string _PayMeth;
		
		private int _RecAcctID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayMethIDChanging(int value);
    partial void OnPayMethIDChanged();
    partial void OnPayMethChanging(string value);
    partial void OnPayMethChanged();
    partial void OnRecAcctIDChanging(int value);
    partial void OnRecAcctIDChanged();
    #endregion
		
		public PayMethod()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayMethID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PayMethID
		{
			get
			{
				return this._PayMethID;
			}
			set
			{
				if ((this._PayMethID != value))
				{
					this.OnPayMethIDChanging(value);
					this.SendPropertyChanging();
					this._PayMethID = value;
					this.SendPropertyChanged("PayMethID");
					this.OnPayMethIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayMeth", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PayMeth
		{
			get
			{
				return this._PayMeth;
			}
			set
			{
				if ((this._PayMeth != value))
				{
					this.OnPayMethChanging(value);
					this.SendPropertyChanging();
					this._PayMeth = value;
					this.SendPropertyChanged("PayMeth");
					this.OnPayMethChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecAcctID", DbType="Int NOT NULL")]
		public int RecAcctID
		{
			get
			{
				return this._RecAcctID;
			}
			set
			{
				if ((this._RecAcctID != value))
				{
					this.OnRecAcctIDChanging(value);
					this.SendPropertyChanging();
					this._RecAcctID = value;
					this.SendPropertyChanged("RecAcctID");
					this.OnRecAcctIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payments")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private int _InvDocID;
		
		private int _PayDocID;
		
		private decimal _Amount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnInvDocIDChanging(int value);
    partial void OnInvDocIDChanged();
    partial void OnPayDocIDChanging(int value);
    partial void OnPayDocIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public Payment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvDocID", DbType="Int NOT NULL")]
		public int InvDocID
		{
			get
			{
				return this._InvDocID;
			}
			set
			{
				if ((this._InvDocID != value))
				{
					this.OnInvDocIDChanging(value);
					this.SendPropertyChanging();
					this._InvDocID = value;
					this.SendPropertyChanged("InvDocID");
					this.OnInvDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayDocID", DbType="Int NOT NULL")]
		public int PayDocID
		{
			get
			{
				return this._PayDocID;
			}
			set
			{
				if ((this._PayDocID != value))
				{
					this.OnPayDocIDChanging(value);
					this.SendPropertyChanging();
					this._PayDocID = value;
					this.SendPropertyChanged("PayDocID");
					this.OnPayDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaxCollection")]
	public partial class TaxCollection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaxCollectID;
		
		private int _DocID;
		
		private int _TaxRateID;
		
		private decimal _TaxAmount;
		
		private System.Nullable<bool> _Collected;
		
		private System.Nullable<bool> _Paid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaxCollectIDChanging(int value);
    partial void OnTaxCollectIDChanged();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnTaxRateIDChanging(int value);
    partial void OnTaxRateIDChanged();
    partial void OnTaxAmountChanging(decimal value);
    partial void OnTaxAmountChanged();
    partial void OnCollectedChanging(System.Nullable<bool> value);
    partial void OnCollectedChanged();
    partial void OnPaidChanging(System.Nullable<bool> value);
    partial void OnPaidChanged();
    #endregion
		
		public TaxCollection()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxCollectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaxCollectID
		{
			get
			{
				return this._TaxCollectID;
			}
			set
			{
				if ((this._TaxCollectID != value))
				{
					this.OnTaxCollectIDChanging(value);
					this.SendPropertyChanging();
					this._TaxCollectID = value;
					this.SendPropertyChanged("TaxCollectID");
					this.OnTaxCollectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int NOT NULL")]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxRateID", DbType="Int NOT NULL")]
		public int TaxRateID
		{
			get
			{
				return this._TaxRateID;
			}
			set
			{
				if ((this._TaxRateID != value))
				{
					this.OnTaxRateIDChanging(value);
					this.SendPropertyChanging();
					this._TaxRateID = value;
					this.SendPropertyChanged("TaxRateID");
					this.OnTaxRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxAmount", DbType="Money NOT NULL")]
		public decimal TaxAmount
		{
			get
			{
				return this._TaxAmount;
			}
			set
			{
				if ((this._TaxAmount != value))
				{
					this.OnTaxAmountChanging(value);
					this.SendPropertyChanging();
					this._TaxAmount = value;
					this.SendPropertyChanged("TaxAmount");
					this.OnTaxAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Collected", DbType="Bit")]
		public System.Nullable<bool> Collected
		{
			get
			{
				return this._Collected;
			}
			set
			{
				if ((this._Collected != value))
				{
					this.OnCollectedChanging(value);
					this.SendPropertyChanging();
					this._Collected = value;
					this.SendPropertyChanged("Collected");
					this.OnCollectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="Bit")]
		public System.Nullable<bool> Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDateRange")]
	public partial class UserDateRange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserDateRangeID;
		
		private string _Username;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserDateRangeIDChanging(int value);
    partial void OnUserDateRangeIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public UserDateRange()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDateRangeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserDateRangeID
		{
			get
			{
				return this._UserDateRangeID;
			}
			set
			{
				if ((this._UserDateRangeID != value))
				{
					this.OnUserDateRangeIDChanging(value);
					this.SendPropertyChanging();
					this._UserDateRangeID = value;
					this.SendPropertyChanged("UserDateRangeID");
					this.OnUserDateRangeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
